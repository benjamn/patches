# HG changeset patch
# User Ben Newman <bnewman@mozilla.com>
# Date 1258408992 28800
# Node ID e15437a1734cdb61315e5f278b435372744ae764
# Parent  f055d2ea3f69a3180aa83e2a22cff2e43289a532
imported patch hsivonen/bug-509666.diff

diff --git a/parser/html/nsHtml5TreeOperation.cpp b/parser/html/nsHtml5TreeOperation.cpp
--- a/parser/html/nsHtml5TreeOperation.cpp
+++ b/parser/html/nsHtml5TreeOperation.cpp
@@ -53,16 +53,44 @@
 #include "nsIScriptElement.h"
 #include "nsIDTD.h"
 #include "nsTraceRefcnt.h"
 #include "nsIDOMHTMLFormElement.h"
 #include "nsIFormControl.h"
 #include "nsIStyleSheetLinkingElement.h"
 #include "nsIDOMDocumentType.h"
 
+/**
+ * Helper class that opens a notification batch if the current doc
+ * is different from the executor doc.
+ */
+class NS_STACK_CLASS nsHtml5OtherDocUpdate {
+  public:
+    nsHtml5OtherDocUpdate(nsIDocument* aCurrentDoc, nsIDocument* aExecutorDoc)
+    {
+      NS_PRECONDITION(aCurrentDoc, "Node has no doc?");
+      NS_PRECONDITION(aExecutorDoc, "Executor has no doc?");
+      if (NS_LIKELY(aCurrentDoc == aExecutorDoc)) {
+        mDocument = nsnull;
+      } else {
+        mDocument = aCurrentDoc;
+        aCurrentDoc->BeginUpdate(UPDATE_CONTENT_MODEL);        
+      }
+    }
+
+    ~nsHtml5OtherDocUpdate()
+    {
+      if (NS_UNLIKELY(mDocument)) {
+        mDocument->EndUpdate(UPDATE_CONTENT_MODEL);
+      }
+    }
+  private:
+    nsIDocument* mDocument;
+};
+
 nsHtml5TreeOperation::nsHtml5TreeOperation()
 #ifdef DEBUG
  : mOpCode(eTreeOpUninitialized)
 #endif
 {
   MOZ_COUNT_CTOR(nsHtml5TreeOperation);
 }
 
@@ -97,36 +125,61 @@ nsresult
 nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor* aBuilder,
                               nsIContent** aScriptElement)
 {
   nsresult rv = NS_OK;
   switch(mOpCode) {
     case eTreeOpAppend: {
       nsIContent* node = *(mOne.node);
       nsIContent* parent = *(mTwo.node);
-      aBuilder->PostPendingAppendNotification(parent, node);
+
+      nsIDocument* executorDoc = aBuilder->GetDocument();
+      NS_ASSERTION(executorDoc, "Null doc on executor");
+      nsIDocument* parentDoc = parent->GetOwnerDoc();
+      NS_ASSERTION(parentDoc, "Null owner doc on old node.");
+
+      if (NS_LIKELY(executorDoc == parentDoc)) {
+        // the usual case. the parent is in the parser's doc
+        aBuilder->PostPendingAppendNotification(parent, node);
+        rv = parent->AppendChildTo(node, PR_FALSE);
+        return rv;
+      }
+      
+      // The parent has been moved to another doc
+      parentDoc->BeginUpdate(UPDATE_CONTENT_MODEL);
+
+      PRUint32 childCount = parent->GetChildCount();
       rv = parent->AppendChildTo(node, PR_FALSE);
+      nsNodeUtils::ContentAppended(parent, childCount);
+
+      parentDoc->EndUpdate(UPDATE_CONTENT_MODEL);
       return rv;
     }
     case eTreeOpDetach: {
       nsIContent* node = *(mOne.node);
       aBuilder->FlushPendingAppendNotifications();
       nsIContent* parent = node->GetParent();
       if (parent) {
+        nsHtml5OtherDocUpdate update(parent->GetOwnerDoc(),
+                                     aBuilder->GetDocument());
         PRUint32 pos = parent->IndexOf(node);
         NS_ASSERTION((pos >= 0), "Element not found as child of its parent");
         rv = parent->RemoveChildAt(pos, PR_TRUE, PR_FALSE);
         NS_ENSURE_SUCCESS(rv, rv);
       }
       return rv;
     }
     case eTreeOpAppendChildrenToNewParent: {
       nsIContent* node = *(mOne.node);
       nsIContent* parent = *(mTwo.node);
       aBuilder->FlushPendingAppendNotifications();
+
+      nsHtml5OtherDocUpdate update(parent->GetOwnerDoc(),
+                                   aBuilder->GetDocument());
+
       PRUint32 childCount = parent->GetChildCount();
       PRBool didAppend = PR_FALSE;
       while (node->GetChildCount()) {
         nsCOMPtr<nsIContent> child = node->GetChildAt(0);
         rv = node->RemoveChildAt(0, PR_TRUE, PR_FALSE);
         NS_ENSURE_SUCCESS(rv, rv);
         rv = parent->AppendChildTo(child, PR_FALSE);
         NS_ENSURE_SUCCESS(rv, rv);
@@ -137,42 +190,69 @@ nsHtml5TreeOperation::Perform(nsHtml5Tre
       }
       return rv;
     }
     case eTreeOpFosterParent: {
       nsIContent* node = *(mOne.node);
       nsIContent* parent = *(mTwo.node);
       nsIContent* table = *(mThree.node);
       nsIContent* foster = table->GetParent();
+
       if (foster && foster->IsNodeOfType(nsINode::eELEMENT)) {
         aBuilder->FlushPendingAppendNotifications();
+
+        nsHtml5OtherDocUpdate update(foster->GetOwnerDoc(),
+                                     aBuilder->GetDocument());
+
         PRUint32 pos = foster->IndexOf(table);
         rv = foster->InsertChildAt(node, pos, PR_FALSE);
         NS_ENSURE_SUCCESS(rv, rv);
         nsNodeUtils::ContentInserted(foster, node, pos);
-      } else {
+        return rv;
+      }
+
+      nsIDocument* executorDoc = aBuilder->GetDocument();
+      NS_ASSERTION(executorDoc, "Null doc on executor");
+      nsIDocument* parentDoc = parent->GetOwnerDoc();
+      NS_ASSERTION(parentDoc, "Null owner doc on old node.");
+
+      if (NS_LIKELY(executorDoc == parentDoc)) {
+        // the usual case. the parent is in the parser's doc
         aBuilder->PostPendingAppendNotification(parent, node);
         rv = parent->AppendChildTo(node, PR_FALSE);
+        return rv;
       }
+      
+      // The parent has been moved to another doc
+      parentDoc->BeginUpdate(UPDATE_CONTENT_MODEL);
+
+      PRUint32 childCount = parent->GetChildCount();
+      rv = parent->AppendChildTo(node, PR_FALSE);
+      nsNodeUtils::ContentAppended(parent, childCount);
+
+      parentDoc->EndUpdate(UPDATE_CONTENT_MODEL);
       return rv;
     }
     case eTreeOpAppendToDocument: {
       nsIContent* node = *(mOne.node);
       aBuilder->FlushPendingAppendNotifications();
       nsIDocument* doc = aBuilder->GetDocument();
       PRUint32 childCount = doc->GetChildCount();
       rv = doc->AppendChildTo(node, PR_FALSE);
       NS_ENSURE_SUCCESS(rv, rv);
       nsNodeUtils::ContentInserted(doc, node, childCount);
       return rv;
     }
     case eTreeOpAddAttributes: {
       nsIContent* node = *(mOne.node);
       nsHtml5HtmlAttributes* attributes = mTwo.attributes;
 
+      nsHtml5OtherDocUpdate update(node->GetOwnerDoc(),
+                                   aBuilder->GetDocument());
+
       nsIDocument* document = node->GetCurrentDoc();
 
       PRInt32 len = attributes->getLength();
       for (PRInt32 i = 0; i < len; ++i) {
         // prefix doesn't need regetting. it is always null or a static atom
         // local name is never null
         nsCOMPtr<nsIAtom> localName = Reget(attributes->getLocalName(i));
         PRInt32 nsuri = attributes->getURI(i);
