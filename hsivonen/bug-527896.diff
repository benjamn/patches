# HG changeset patch
# User Ben Newman <bnewman@mozilla.com>
# Date 1258408992 28800
# Node ID d57ba292ba30bbd4a1e96e754bcfdda630eaa7f2
# Parent  e15437a1734cdb61315e5f278b435372744ae764
imported patch hsivonen/bug-527896.diff

diff --git a/content/base/public/nsIScriptElement.h b/content/base/public/nsIScriptElement.h
--- a/content/base/public/nsIScriptElement.h
+++ b/content/base/public/nsIScriptElement.h
@@ -42,63 +42,87 @@
 #include "nsISupports.h"
 #include "nsIURI.h"
 #include "nsCOMPtr.h"
 #include "nsIScriptLoaderObserver.h"
 #include "nsWeakPtr.h"
 #include "nsIParser.h"
 
 #define NS_ISCRIPTELEMENT_IID \
-{ 0xa28c198e, 0x14f0, 0x42b1, \
-{ 0x8f, 0x6b, 0x0e, 0x7f, 0xca, 0xb4, 0xf4, 0xe8 } }
+{ 0xa9d5732a, 0x8c1f, 0x439d, \
+{ 0x83, 0x75, 0x3d, 0xf6, 0xa9, 0xba, 0xa3, 0x7d } }
 
 /**
  * Internal interface implemented by script elements
  */
 class nsIScriptElement : public nsIScriptLoaderObserver {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ISCRIPTELEMENT_IID)
 
   nsIScriptElement()
     : mLineNumber(0),
       mIsEvaluated(PR_FALSE),
       mMalformed(PR_FALSE),
       mDoneAddingChildren(PR_TRUE),
+      mFrozen(PR_FALSE),
+      mDefer(PR_FALSE),
+      mAsync(PR_FALSE),
+      mUri(nsnull),
       mCreatorParser(nsnull)
   {
   }
 
   /**
    * Content type identifying the scripting language. Can be empty, in
    * which case javascript will be assumed.
    */
   virtual void GetScriptType(nsAString& type) = 0;
     
   /**
    * Location of script source text. Can return null, in which case
    * this is assumed to be an inline script element.
    */
-  virtual already_AddRefed<nsIURI> GetScriptURI() = 0;
+  already_AddRefed<nsIURI> GetScriptURI()
+  {
+    NS_PRECONDITION(mFrozen, "Not ready for this call yet!");
+    NS_IF_ADDREF(mUri);
+    return mUri.get();
+  }
   
   /**
    * Script source text for inline script elements.
    */
   virtual void GetScriptText(nsAString& text) = 0;
 
   virtual void GetScriptCharset(nsAString& charset) = 0;
 
   /**
+   * Freezes the return values of GetScriptDeferred(), GetScriptAsync() and
+   * GetScriptURI() so that subsequent modifications to the attributes don't
+   * change execution behavior.
+   */
+  virtual void FreezeUriAsyncDefer() = 0;
+
+  /**
    * Is the script deferred. Currently only supported by HTML scripts.
    */
-  virtual PRBool GetScriptDeferred() = 0;
+  PRBool GetScriptDeferred()
+  {
+    NS_PRECONDITION(mFrozen, "Not ready for this call yet!");
+    return mDefer;
+  }
 
   /**
    * Is the script async. Currently only supported by HTML scripts.
    */
-  virtual PRBool GetScriptAsync() = 0;
+  PRBool GetScriptAsync()
+  {
+    NS_PRECONDITION(mFrozen, "Not ready for this call yet!");
+    return mAsync;  
+  }
 
   void SetScriptLineNumber(PRUint32 aLineNumber)
   {
     mLineNumber = aLineNumber;
   }
   PRUint32 GetScriptLineNumber()
   {
     return mLineNumber;
@@ -160,18 +184,22 @@ public:
    */
   already_AddRefed<nsIParser> GetCreatorParser()
   {
     nsCOMPtr<nsIParser> parser = do_QueryReferent(mCreatorParser);
     return parser.forget();
   }
 
 protected:
-  PRUint32 mLineNumber;
-  PRPackedBool mIsEvaluated;
-  PRPackedBool mMalformed;
-  PRPackedBool mDoneAddingChildren;
-  nsWeakPtr    mCreatorParser;
+  PRUint32         mLineNumber;
+  PRPackedBool     mIsEvaluated;
+  PRPackedBool     mMalformed;
+  PRPackedBool     mDoneAddingChildren;
+  PRPackedBool     mFrozen;
+  PRPackedBool     mDefer;
+  PRPackedBool     mAsync;
+  nsCOMPtr<nsIURI> mUri;
+  nsWeakPtr        mCreatorParser;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIScriptElement, NS_ISCRIPTELEMENT_IID)
 
 #endif // nsIScriptElement_h___
diff --git a/content/base/src/nsScriptElement.cpp b/content/base/src/nsScriptElement.cpp
--- a/content/base/src/nsScriptElement.cpp
+++ b/content/base/src/nsScriptElement.cpp
@@ -176,16 +176,18 @@ nsScriptElement::MaybeProcessScript()
   NS_ASSERTION(cont->DebugGetSlots()->mMutationObservers.Contains(this),
                "You forgot to add self as observer");
 
   if (mIsEvaluated || !mDoneAddingChildren || !cont->IsInDoc() ||
       mMalformed || !HasScriptContent()) {
     return NS_OK;
   }
 
+  FreezeUriAsyncDefer();
+
   if (InNonScriptingContainer(cont)) {
     // Make sure to flag ourselves as evaluated
     mIsEvaluated = PR_TRUE;
     return NS_OK;
   }
 
   nsresult scriptresult = NS_OK;
   nsRefPtr<nsScriptLoader> loader = cont->GetOwnerDoc()->ScriptLoader();
diff --git a/content/base/test/Makefile.in b/content/base/test/Makefile.in
--- a/content/base/test/Makefile.in
+++ b/content/base/test/Makefile.in
@@ -149,16 +149,17 @@ _TEST_FILES = 	test_bug5141.html \
 		test_bug405182.html \
 		test_bug403841.html \
 		test_bug409380.html \
 		test_bug410229.html \
 		test_bug413974.html \
 		test_bug415860.html \
 		test_bug414190.html \
 		test_bug414796.html \
+		test_bug527896.html \
 		test_bug416317-1.html \
 		test_bug416317-2.html \
 		test_XHRSendData.html \
 		file_XHRSendData.sjs \
 		file_XHRSendData_doc.xml \
 		file_XHRSendData_doc.xml^headers^ \
 		file_bug416317.xhtml \
 		test_bug416383.html \
diff --git a/content/base/test/test_bug527896.html b/content/base/test/test_bug527896.html
new file mode 100644
--- /dev/null
+++ b/content/base/test/test_bug527896.html
@@ -0,0 +1,72 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=527896
+-->
+<head>
+  <title>Test for Bug 527896</title>
+  <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+<body onload='done();'>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=527896">Mozilla Bug 527896</a>
+<p id="display"></p>
+<div id="content" style="display: none">
+  <iframe></iframe>
+</div>
+<pre id="test">
+<script class="testbody" type="text/javascript">
+
+/** Test for Bug 527896 **/
+
+netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+var prefs = Components.classes["@mozilla.org/preferences-service;1"]
+          .getService(Components.interfaces.nsIPrefBranch);
+var gOriginalHtml5Pref = prefs.getBoolPref("html5.enable");
+prefs.setBoolPref("html5.enable", true);
+
+SimpleTest.waitForExplicitFinish();
+
+var docWrittenSrcExecuted = false;
+var scriptInsertedSrcExecuted = false;
+
+// the iframe test runs with the HTML5 parser
+
+var iframe = document.getElementsByTagName('iframe')[0];
+iframe.contentWindow.document.open();
+iframe.contentWindow.document.write("<!DOCTYPE html>");
+iframe.contentWindow.document.write("<body><script id =\"thescript\" src=\"data:text/javascript,parent.docWrittenSrcExecuted = true;\">");
+
+// now remove the src attribute before the end tag is parsed
+iframe.contentWindow.document.getElementById('thescript').removeAttribute('src');
+
+iframe.contentWindow.document.write("parent.ok(false, \"Content executed.\");");
+iframe.contentWindow.document.write("<\/script>");
+iframe.contentWindow.document.close();
+
+// the insertion test runs with the default HTML parser since it's in this document itself!
+
+var div = document.getElementById('content');
+var script = document.createElement('script');
+div.appendChild(script); // this shouldn't yet freeze the script node nor run it
+script.setAttribute("src", "data:text/javascript,scriptInsertedSrcExecuted = true;");
+
+todo(false, "Add SVG tests after bug 528442.");
+
+function done() {
+  ok(docWrittenSrcExecuted, "document.written src didn't execute");
+  ok(scriptInsertedSrcExecuted, "script-inserted src didn't execute");
+
+  netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+  var prefs = Components.classes["@mozilla.org/preferences-service;1"]
+            .getService(Components.interfaces.nsIPrefBranch);
+  prefs.setBoolPref("html5.enable", gOriginalHtml5Pref);
+
+  SimpleTest.finish();
+}
+
+</script>
+</pre>
+</body>
+</html>
diff --git a/content/html/content/src/nsHTMLScriptElement.cpp b/content/html/content/src/nsHTMLScriptElement.cpp
--- a/content/html/content/src/nsHTMLScriptElement.cpp
+++ b/content/html/content/src/nsHTMLScriptElement.cpp
@@ -324,21 +324,19 @@ public:
   // nsIDOMHTMLElement
   NS_FORWARD_NSIDOMHTMLELEMENT(nsGenericHTMLElement::)
 
   NS_DECL_NSIDOMHTMLSCRIPTELEMENT
   NS_DECL_NSIDOMNSHTMLSCRIPTELEMENT
 
   // nsIScriptElement
   virtual void GetScriptType(nsAString& type);
-  virtual already_AddRefed<nsIURI> GetScriptURI();
   virtual void GetScriptText(nsAString& text);
   virtual void GetScriptCharset(nsAString& charset);
-  virtual PRBool GetScriptDeferred();
-  virtual PRBool GetScriptAsync();
+  virtual void FreezeUriAsyncDefer();
 
   // nsIContent
   virtual nsresult BindToTree(nsIDocument* aDocument, nsIContent* aParent,
                               nsIContent* aBindingParent,
                               PRBool aCompileEventHandlers);
 
   virtual nsresult GetInnerHTML(nsAString& aInnerHTML);
   virtual nsresult SetInnerHTML(const nsAString& aInnerHTML);
@@ -402,16 +400,21 @@ nsHTMLScriptElement::BindToTree(nsIDocum
                                 nsIContent* aBindingParent,
                                 PRBool aCompileEventHandlers)
 {
   nsresult rv = nsGenericHTMLElement::BindToTree(aDocument, aParent,
                                                  aBindingParent,
                                                  aCompileEventHandlers);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  if (!mDoneAddingChildren) {
+    // parser-inserted script
+    FreezeUriAsyncDefer();
+  }
+
   if (aDocument) {
     MaybeProcessScript();
   }
 
   return NS_OK;
 }
 
 nsresult
@@ -490,67 +493,57 @@ nsHTMLScriptElement::IsDoneAddingChildre
 // need to be transfered when modifying
 
 void
 nsHTMLScriptElement::GetScriptType(nsAString& type)
 {
   GetType(type);
 }
 
-// variation of this code in nsSVGScriptElement - check if changes
-// need to be transfered when modifying
-
-already_AddRefed<nsIURI>
-nsHTMLScriptElement::GetScriptURI()
-{
-  nsIURI *uri = nsnull;
-  nsAutoString src;
-  GetSrc(src);
-  if (!src.IsEmpty())
-    NS_NewURI(&uri, src);
-  return uri;
-}
-
 void
 nsHTMLScriptElement::GetScriptText(nsAString& text)
 {
   GetText(text);
 }
 
 void
 nsHTMLScriptElement::GetScriptCharset(nsAString& charset)
 {
   GetCharset(charset);
 }
 
-PRBool
-nsHTMLScriptElement::GetScriptDeferred()
+void
+nsHTMLScriptElement::FreezeUriAsyncDefer()
 {
-  PRBool defer, async;
-  GetAsync(&async);
-  GetDefer(&defer);
-  nsCOMPtr<nsIURI> uri = GetScriptURI();
+  if (mFrozen) {
+    return;
+  }
+  
+  // variation of this code in nsSVGScriptElement - check if changes
+  // need to be transfered when modifying
+  if (HasAttr(kNameSpaceID_None, nsGkAtoms::src)) {
+    nsAutoString src;
+    GetSrc(src);
+    NS_NewURI(getter_AddRefs(mUri), src);
 
-  return !async && defer && uri;
-}
+    PRBool defer, async;
+    GetAsync(&async);
+    GetDefer(&defer);
 
-PRBool
-nsHTMLScriptElement::GetScriptAsync()
-{
-  PRBool async;
-  GetAsync(&async);
-  nsCOMPtr<nsIURI> uri = GetScriptURI();
-
-  return async && uri;
+    mDefer = !async && defer;
+    mAsync = async;
+  }
+  
+  mFrozen = PR_TRUE;
 }
 
 PRBool
 nsHTMLScriptElement::HasScriptContent()
 {
-  return HasAttr(kNameSpaceID_None, nsGkAtoms::src) ||
+  return (mFrozen ? !!mUri : HasAttr(kNameSpaceID_None, nsGkAtoms::src)) ||
          nsContentUtils::HasNonEmptyTextContent(this);
 }
 
 nsresult
 nsHTMLScriptElement::MaybeProcessScript()
 {
   nsresult rv = nsScriptElement::MaybeProcessScript();
   if (rv == NS_CONTENT_SCRIPT_IS_EVENTHANDLER) {
diff --git a/content/svg/content/src/nsSVGScriptElement.cpp b/content/svg/content/src/nsSVGScriptElement.cpp
--- a/content/svg/content/src/nsSVGScriptElement.cpp
+++ b/content/svg/content/src/nsSVGScriptElement.cpp
@@ -71,22 +71,20 @@ public:
   // xxx If xpcom allowed virtual inheritance we wouldn't need to
   // forward here :-(
   NS_FORWARD_NSIDOMNODE(nsSVGScriptElementBase::)
   NS_FORWARD_NSIDOMELEMENT(nsSVGScriptElementBase::)
   NS_FORWARD_NSIDOMSVGELEMENT(nsSVGScriptElementBase::)
 
   // nsIScriptElement
   virtual void GetScriptType(nsAString& type);
-  virtual already_AddRefed<nsIURI> GetScriptURI();
   virtual void GetScriptText(nsAString& text);
   virtual void GetScriptCharset(nsAString& charset);
-  virtual PRBool GetScriptDeferred();
-  virtual PRBool GetScriptAsync();
-
+  virtual void FreezeUriAsyncDefer();
+  
   // nsScriptElement
   virtual PRBool HasScriptContent();
 
   // nsSVGElement specializations:
   virtual void DidChangeString(PRUint8 aAttrEnum);
 
   // nsIContent specializations:
   virtual nsresult DoneAddingChildren(PRBool aHaveNotified);
@@ -194,65 +192,58 @@ nsSVGScriptElement::GetHref(nsIDOMSVGAni
 // nsIScriptElement methods
 
 void
 nsSVGScriptElement::GetScriptType(nsAString& type)
 {
   GetType(type);
 }
 
-// variation of this code in nsHTMLScriptElement - check if changes
-// need to be transfered when modifying
-
-already_AddRefed<nsIURI>
-nsSVGScriptElement::GetScriptURI()
-{
-  nsIURI *uri = nsnull;
-  nsAutoString src;
-  mStringAttributes[HREF].GetAnimValue(src, this);
-  if (!src.IsEmpty()) {
-    nsCOMPtr<nsIURI> baseURI = GetBaseURI();
-    NS_NewURI(&uri, src, nsnull, baseURI);
-  }
-  return uri;
-}
-
 void
 nsSVGScriptElement::GetScriptText(nsAString& text)
 {
   nsContentUtils::GetNodeTextContent(this, PR_FALSE, text);
 }
 
 void
 nsSVGScriptElement::GetScriptCharset(nsAString& charset)
 {
   charset.Truncate();
 }
 
-PRBool
-nsSVGScriptElement::GetScriptDeferred()
+void
+nsSVGScriptElement::FreezeUriAsyncDefer()
 {
-  return PR_FALSE;
-}
+  if (mFrozen) {
+    return;
+  }
 
-PRBool
-nsSVGScriptElement::GetScriptAsync()
-{
-  return PR_FALSE;
+  // variation of this code in nsHTMLScriptElement - check if changes
+  // need to be transfered when modifying
+  nsAutoString src;
+  mStringAttributes[HREF].GetAnimValue(src, this);
+  // preserving bug 528444 here due to being unsure how to fix correctly
+  if (!src.IsEmpty()) {
+    nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+    NS_NewURI(getter_AddRefs(mUri), src, nsnull, baseURI);
+  }
+  
+  mFrozen = PR_TRUE;
 }
 
 //----------------------------------------------------------------------
 // nsScriptElement methods
 
 PRBool
 nsSVGScriptElement::HasScriptContent()
 {
-  nsAutoString str;
-  mStringAttributes[HREF].GetAnimValue(str, this);
-  return !str.IsEmpty() ||
+  nsAutoString src;
+  mStringAttributes[HREF].GetAnimValue(src, this);
+  // preserving bug 528444 here due to being unsure how to fix correctly
+  return (mFrozen ? !!mUri : !src.IsEmpty()) ||
          nsContentUtils::HasNonEmptyTextContent(this);
 }
 
 //----------------------------------------------------------------------
 // nsSVGElement methods
 
 void
 nsSVGScriptElement::DidChangeString(PRUint8 aAttrEnum)
@@ -286,15 +277,20 @@ nsSVGScriptElement::BindToTree(nsIDocume
                                nsIContent* aBindingParent,
                                PRBool aCompileEventHandlers)
 {
   nsresult rv = nsSVGScriptElementBase::BindToTree(aDocument, aParent,
                                                    aBindingParent,
                                                    aCompileEventHandlers);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  if (!mDoneAddingChildren) {
+    // parser-inserted script
+    FreezeUriAsyncDefer();  
+  }
+
   if (aDocument) {
     MaybeProcessScript();
   }
 
   return NS_OK;
 }
 
