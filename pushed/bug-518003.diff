# HG changeset patch
# User Ben Newman <bnewman@mozilla.com>
# Date 1254349034 25200
# Node ID 3b480c8bcb7e0e07b39f33504b8b84d950d1151a
# Parent  6e8de7ff27b891adbee888594ffa5be3b100265a
Bug 518003 - implement function to check whether element matches a CSS selector. r+sr=bzbarsky

diff --git a/content/base/src/nsGenericElement.cpp b/content/base/src/nsGenericElement.cpp
--- a/content/base/src/nsGenericElement.cpp
+++ b/content/base/src/nsGenericElement.cpp
@@ -5317,8 +5317,35 @@ nsGenericElement::doQuerySelectorAll(nsI
                                   getter_Transfers(selectorList),
                                   &presContext);
   NS_ENSURE_SUCCESS(rv, rv);
 
   TryMatchingElementsInSubtree(aRoot, nsnull, presContext, selectorList,
                                AppendAllMatchingElements, contentList);
   return NS_OK;
 }
+
+NS_IMETHODIMP
+nsNSElementTearoff::MozMatchesSelector(const nsAString& aSelector, PRBool* aReturn)
+{
+  NS_PRECONDITION(aReturn, "Null out param?");
+  *aReturn = nsGenericElement::doMatchesSelector(mContent, aSelector);
+  return NS_OK;
+}
+
+/* static */
+PRBool
+nsGenericElement::doMatchesSelector(nsIContent* aNode, const nsAString& aSelector)
+{
+  nsAutoPtr<nsCSSSelectorList> selectorList;
+  nsPresContext* presContext;
+  PRBool matches = PR_FALSE;
+
+  if (NS_SUCCEEDED(ParseSelectorList(aNode, aSelector,
+                                     getter_Transfers(selectorList),
+                                     &presContext)))
+  {
+    RuleProcessorData data(presContext, aNode, nsnull);
+    matches = nsCSSRuleProcessor::SelectorListMatches(data, selectorList);
+  }
+
+  return matches;
+}
diff --git a/content/base/src/nsGenericElement.h b/content/base/src/nsGenericElement.h
--- a/content/base/src/nsGenericElement.h
+++ b/content/base/src/nsGenericElement.h
@@ -665,16 +665,17 @@ public:
   /**
    * Helper methods for implementing querySelector/querySelectorAll
    */
   static nsresult doQuerySelector(nsINode* aRoot, const nsAString& aSelector,
                                   nsIDOMElement **aReturn);
   static nsresult doQuerySelectorAll(nsINode* aRoot,
                                      const nsAString& aSelector,
                                      nsIDOMNodeList **aReturn);
+  static PRBool doMatchesSelector(nsIContent* aNode, const nsAString& aSelector);
 
   /**
    * Default event prehandling for content objects. Handles event retargeting.
    */
   static nsresult doPreHandleEvent(nsIContent* aContent,
                                    nsEventChainPreVisitor& aVisitor);
 
   /**
diff --git a/content/base/test/file_bug416317.xhtml b/content/base/test/file_bug416317.xhtml
--- a/content/base/test/file_bug416317.xhtml
+++ b/content/base/test/file_bug416317.xhtml
@@ -494,16 +494,46 @@
           return root[select](q, resolver);
         } catch(e){
           if ( e.message.indexOf("ERR") > -1 || e.code == DOMException.NAMESPACE_ERR ||
               e.code == DOMException.SYNTAX_ERR)
             throw e;
         }
       }
 
+      var all = query("*");
+
+      function checkMatchesSelector(results, q) {
+        var key = +new Date + ":" + Math.random();
+
+        function report(item, shouldMatch) {
+          assert( item.mozMatchesSelector(q) === shouldMatch,
+                  item + (shouldMatch ? "does not match" : "matches")
+                       + " selector '" + q + "'" );
+        }
+
+        for (var i = 0; i < results.length; i++) {
+          var item = results.item(i);
+          item[key] = true;
+          report( item, true );
+        }
+
+        for (var stride = 15, // reduce test spam
+                 i = Math.round(Math.random() * stride);
+             i < all.length; i += stride)
+        {
+          var item = all.item(i),
+              shouldMatch = !!item[key];
+          report( item, shouldMatch );
+        }
+
+        for (var i = 0; i < results.length; i++)
+          delete results.item(i)[key];
+      }
+
       function t( name, q, ids, restrict, ids2 ) {
         var pass = true;
 
         if ( restrict === false && root != document )
           return;
 
         var namespaced = /\|[^=]/.test( q );
         var prepend = namespaced ? "xHTML|*#root3 " : "#root3 ";
@@ -530,16 +560,19 @@
             var results = query(q);
             pass = hasPassed( results, ids );
           } catch(e) {
             pass = e.code == DOMException.SYNTAX_ERR;
           }
   
           assert( pass, type + ": " + name + " (" + nq + ")" +
             (pass ? "" : " Expected: " + extra(ids) + " Received: " + extra(results)) );
+
+          if (results)
+            checkMatchesSelector( results, q );
         }
 
         function hasPassed(results, ids){
           var pass = (results && results.length == ids.length) || (!results && !ids);
   
           if ( ids && results ) {
             for ( var i = 0; ids && i < ids.length; i++ ) {
               if ( ids[i] !== results[i].getAttribute("id") ) {
@@ -582,17 +615,16 @@
       t( "Parent Element", "xHTML|div xHTML|p", ["firstp","ap","sndp","en","sap","first"] );
       t( "Parent Element", "*|div xHTML|p", ["firstp","ap","sndp","en","sap","first"] );
       t( "Parent Element", "*|div *|p", ["firstp","ap","sndp","en","sap","first"] );
       t( "Child", "xHTML|p > xHTML|a", ["simon1","google","groups","mark","yahoo","simon"] );
       t( "Adjacent", "xHTML|a + xHTML|a", ["groups"] );
       t( "Adjacent", "xHTML|a + a", ["groups"] );
       t( "Nth-child", "xHTML|*#form xHTML|*#select1 xHTML|option:nth-child(3)", ["option1c"] );
 
-      var all = query("*");
       assert( all && all.length > 30, type + ": Select all" );
       var good = all && all.length;
       for ( var i = 0; all && i < all.length; i++ )
         if ( all[i].nodeType != 1 )
           good = false;
       assert( good, type + ": Select all elements, no comment nodes" );
 
       if ( root == document ) {
diff --git a/dom/interfaces/core/nsIDOMNSElement.idl b/dom/interfaces/core/nsIDOMNSElement.idl
--- a/dom/interfaces/core/nsIDOMNSElement.idl
+++ b/dom/interfaces/core/nsIDOMNSElement.idl
@@ -34,17 +34,17 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "domstubs.idl"
 
-[scriptable, uuid(FA8D7AF8-C208-4564-A0CD-346C345711F0)]
+[scriptable, uuid(D894B5D4-44F3-422A-A220-7763C12D4A94)]
 interface nsIDOMNSElement : nsISupports
 {
   /*
    * Retrieve elements matching all classes listed in a
    * space-separated string.
    *
    * See <http://whatwg.org/specs/web-apps/current-work/>
    */
@@ -163,9 +163,14 @@ interface nsIDOMNSElement : nsISupports
    */
   void setCapture([optional] in boolean retargetToElement);
 
   /**
    * If this element has captured the mouse, release the capture. If another
    * element has captured the mouse, this method has no effect.
    */
   void releaseCapture();
+
+  /**
+   * Returns whether this element would be selected by the given selector string.
+   */
+  boolean mozMatchesSelector(in DOMString selector);
 };
diff --git a/js/src/xpconnect/src/dom_quickstubs.qsconf b/js/src/xpconnect/src/dom_quickstubs.qsconf
--- a/js/src/xpconnect/src/dom_quickstubs.qsconf
+++ b/js/src/xpconnect/src/dom_quickstubs.qsconf
@@ -223,16 +223,17 @@ members = [
     'nsIDOMNSElement.getClientRects',
     'nsIDOMNSElement.getBoundingClientRect',
     'nsIDOMNSElement.getElementsByClassName',
     'nsIDOMNSElement.scrollWidth',
     'nsIDOMNSElement.clientLeft',
     'nsIDOMNSElement.clientHeight',
     'nsIDOMNSElement.clientWidth',
     'nsIDOMNSElement.clientTop',
+    'nsIDOMNSElement.mozMatchesSelector',
 
     # dom/public/idl/css
     'nsIDOMElementCSSInlineStyle.style',
     'nsIDOMCSS2Properties.*',
     'nsIDOMNSCSS2Properties.*',
     'nsIDOMRect.top',
     'nsIDOMRect.right',
     'nsIDOMRect.left',
