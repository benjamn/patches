diff --git a/content/base/src/nsContentUtils.cpp b/content/base/src/nsContentUtils.cpp
--- a/content/base/src/nsContentUtils.cpp
+++ b/content/base/src/nsContentUtils.cpp
@@ -3454,71 +3454,16 @@ nsContentUtils::CreateContextualFragment
   nsCOMPtr<nsINode> node = do_QueryInterface(aContextNode);
   NS_ENSURE_TRUE(node, NS_ERROR_NOT_AVAILABLE);
 
   // If we don't have a document here, we can't get the right security context
   // for compiling event handlers... so just bail out.
   nsCOMPtr<nsIDocument> document = node->GetOwnerDoc();
   NS_ENSURE_TRUE(document, NS_ERROR_NOT_AVAILABLE);
 
-  nsAutoTArray<nsString, 32> tagStack;
-  nsAutoString uriStr, nameStr;
-  nsCOMPtr<nsIContent> content = do_QueryInterface(aContextNode);
-  // just in case we have a text node
-  if (content && !content->IsNodeOfType(nsINode::eELEMENT))
-    content = content->GetParent();
-
-  while (content && content->IsNodeOfType(nsINode::eELEMENT)) {
-    nsString& tagName = *tagStack.AppendElement();
-    NS_ENSURE_TRUE(&tagName, NS_ERROR_OUT_OF_MEMORY);
-
-    content->NodeInfo()->GetQualifiedName(tagName);
-
-    // see if we need to add xmlns declarations
-    PRUint32 count = content->GetAttrCount();
-    PRBool setDefaultNamespace = PR_FALSE;
-    if (count > 0) {
-      PRUint32 index;
-
-      for (index = 0; index < count; index++) {
-        const nsAttrName* name = content->GetAttrNameAt(index);
-        if (name->NamespaceEquals(kNameSpaceID_XMLNS)) {
-          content->GetAttr(kNameSpaceID_XMLNS, name->LocalName(), uriStr);
-
-          // really want something like nsXMLContentSerializer::SerializeAttr
-          tagName.Append(NS_LITERAL_STRING(" xmlns")); // space important
-          if (name->GetPrefix()) {
-            tagName.Append(PRUnichar(':'));
-            name->LocalName()->ToString(nameStr);
-            tagName.Append(nameStr);
-          } else {
-            setDefaultNamespace = PR_TRUE;
-          }
-          tagName.Append(NS_LITERAL_STRING("=\"") + uriStr +
-            NS_LITERAL_STRING("\""));
-        }
-      }
-    }
-
-    if (!setDefaultNamespace) {
-      nsINodeInfo* info = content->NodeInfo();
-      if (!info->GetPrefixAtom() &&
-          info->NamespaceID() != kNameSpaceID_None) {
-        // We have no namespace prefix, but have a namespace ID.  Push
-        // default namespace attr in, so that our kids will be in our
-        // namespace.
-        info->GetNamespaceURI(uriStr);
-        tagName.Append(NS_LITERAL_STRING(" xmlns=\"") + uriStr +
-                       NS_LITERAL_STRING("\""));
-      }
-    }
-
-    content = content->GetParent();
-  }
-
   nsCAutoString contentType;
   PRBool bCaseSensitive = PR_TRUE;
   nsAutoString buf;
   document->GetContentType(buf);
   LossyCopyUTF16toASCII(buf, contentType);
   bCaseSensitive = document->IsCaseSensitive();
 
   nsCOMPtr<nsIHTMLDocument> htmlDoc(do_QueryInterface(document));
@@ -3582,17 +3527,18 @@ nsContentUtils::CreateContextualFragment
       mode = eDTDMode_full_standards;
       break;
     default:
       NS_NOTREACHED("unknown mode");
       break;
   }
 
   // XXX Shouldn't we be returning rv if it's a failure code?
-  rv = parser->ParseFragment(aFragment, nsnull, tagStack,
+  nsCOMPtr<nsIContent> content = do_QueryInterface(aContextNode);
+  rv = parser->ParseFragment(aFragment, nsnull, content,
                              !bHTML, contentType, mode);
   if (NS_SUCCEEDED(rv)) {
     rv = sink->GetFragment(aWillOwnFragment, aReturn);
   }
 
   document->SetFragmentParser(parser);
 
   return NS_OK;
diff --git a/content/html/content/test/Makefile.in b/content/html/content/test/Makefile.in
--- a/content/html/content/test/Makefile.in
+++ b/content/html/content/test/Makefile.in
@@ -119,12 +119,13 @@ _TEST_FILES = 	test_bug589.html \
 		test_bug428135.xhtml \
 		test_bug430351.html \
 		test_bug430392.html \
 		bug441930_iframe.html \
 		test_bug441930.html \
 		test_bug442801.html \
 		test_bug448166.html \
 		test_bug460568.html \
+		innerhtml_perf.html \
 		$(NULL)
 
 libs:: $(_TEST_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/tests/$(relativesrcdir)
diff --git a/content/html/content/test/innerhtml_perf.html b/content/html/content/test/innerhtml_perf.html
new file mode 100644
--- /dev/null
+++ b/content/html/content/test/innerhtml_perf.html
@@ -0,0 +1,92 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
+<html>
+  <head>
+    <style type="text/css">
+      div.hbar {
+        background: #99f;
+        margin: 2px;
+        padding: 10px 0;
+        overflow: show;
+        font-size: 10px;
+        font-family: verdana;
+      }
+      div.errbar {
+        height: 2px;
+        background: black;
+        position: relative;
+        float: right;
+      }
+    </style>
+
+    <script type="text/javascript">
+
+      Array.prototype.mean = function() {
+        const len = this.length;
+        var sum = 0;
+        for (var i = 0; i < len; ++i)
+          sum += this[i];
+        return sum / len;
+      };
+
+      Array.prototype.stdev = function() {
+        var mean = this.mean(),
+            variance = 0;
+        for (var i = 0; i < this.length; ++i)
+          variance += Math.pow(this[i] - mean, 2);
+        return Math.sqrt(variance);
+      };
+
+      function test(id, n, t) {
+        const parent = document.getElementById(id),
+              results = [];
+        while (t --> 0) {
+          const start = +new Date;
+          for (var i = 0; i < n; ++i)
+            parent.innerHTML = "<span>" + id + ":" + i + "</span>";
+          const end = +new Date;
+          results.push(end - start);
+        }
+        return results;
+      }
+
+      function runTests(n, t) {
+        hbar(test("pre",   n, t));
+        hbar(test("inner", n, t));
+        hbar(test("post",  n, t));
+      }
+
+      function hbar(results) {
+        var mean = results.mean();
+        results.sort();
+        // while (results[results.length - 1] > mean * 2)
+        //   console.log(results.pop());
+        var stdev = results.stdev();
+        mean = results.mean();
+
+        var div = document.createElement("div"),
+            errbar = document.createElement("div"),
+            factor = 15,
+            adjstd = stdev * factor;
+
+        errbar.className = "errbar";
+        errbar.style.width = adjstd + "px";
+        errbar.style.left = (adjstd/2) + "px";
+        div.className = "hbar";
+        div.style.width = (mean * factor) + "px";
+
+        document.body.appendChild(div).appendChild(errbar);
+        div.appendChild(document.createTextNode(results));
+        div.appendChild(document.createElement("br"));
+        div.appendChild(document.createTextNode(mean));
+      }
+
+    </script>
+  </head>
+  <body onload="runTests(500, 20)">
+    <span id="pre"></span>
+     <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b> <b>
+      <span id="inner"></span>
+    </b></b></b></b></b></b></b></b></b></b></b></b></b></b></b></b></b></b></b></b>
+    <span id="post"></span>
+  </body>
+</html>
diff --git a/parser/htmlparser/public/nsIParser.h b/parser/htmlparser/public/nsIParser.h
--- a/parser/htmlparser/public/nsIParser.h
+++ b/parser/htmlparser/public/nsIParser.h
@@ -64,16 +64,17 @@
 { 0x81, 0x6f, 0x0, 0x0, 0x64, 0x65, 0x73, 0x74 } }
 
 class nsIContentSink;
 class nsIRequestObserver;
 class nsIParserFilter;
 class nsString;
 class nsIURI;
 class nsIChannel;
+class nsIContent;
 
 enum eParserCommands {
   eViewNormal,
   eViewSource,
   eViewFragment,
   eViewErrors
 };
 
@@ -247,17 +248,23 @@ class nsIParser : public nsISupports {
      * @param aTagStack The context of the source buffer.
      * @param aXMLMode Whether this is XML or HTML
      * @param aContentType The content-type of this document.
      * @param aMode The DTDMode that the parser should parse this fragment in.
      * @return Success or failure.
      */
     NS_IMETHOD ParseFragment(const nsAString& aSourceBuffer,
                              void* aKey,
-                             nsTArray<nsString>& aTagStack,
+                             nsTArray<nsString> &aTagStack,
+                             PRBool aXMLMode,
+                             const nsACString& aContentType,
+                             nsDTDMode aMode = eDTDMode_autodetect) = 0;
+    NS_IMETHOD ParseFragment(const nsAString& aSourceBuffer,
+                             void* aKey,
+                             nsIContent *aContextNode,
                              PRBool aXMLMode,
                              const nsACString& aContentType,
                              nsDTDMode aMode = eDTDMode_autodetect) = 0;
 
     /**
      * This method gets called when the tokens have been consumed, and it's time
      * to build the model via the content sink.
      * @update	gess5/11/98
diff --git a/parser/htmlparser/src/nsParser.cpp b/parser/htmlparser/src/nsParser.cpp
--- a/parser/htmlparser/src/nsParser.cpp
+++ b/parser/htmlparser/src/nsParser.cpp
@@ -2042,24 +2042,149 @@ nsParser::Parse(const nsAString& aSource
         }
       }
     }
   }
 
   return result;
 }
 
+#include "nsGkAtoms.h"
+#include "nsIContent.h"
+#include "nsAttrName.h"
+
+static inline PRBool
+LikelyToAffectParsing(const nsIAtom *aTag)
+{
+  return PR_TRUE;
+  // return aTag == nsGkAtoms::body
+  //     || aTag == nsGkAtoms::head
+  //     || aTag == nsGkAtoms::html
+  //     || aTag == nsGkAtoms::table
+  //     || aTag == nsGkAtoms::tr
+  //     || aTag == nsGkAtoms::td
+  //     || aTag == nsGkAtoms::form;
+    //|| ...
+}
+
+static inline PRBool
+AncestorsMayBeIgnored(const nsIAtom *aTag)
+{
+  return PR_TRUE;
+  // return aTag == nsGkAtoms::div
+  //     || aTag == nsGkAtoms::textarea;
+    //|| ...
+}
+
+static inline nsIContent *
+GetSignificantParent(const nsIContent *aChild)
+{
+  nsIContent *parent;
+  nsIAtom *parentTag, *childTag = aChild->Tag();
+
+  if (AncestorsMayBeIgnored(childTag))
+    return nsnull;
+
+  while ((parent = aChild->GetParent())) {
+    parentTag = parent->Tag();
+    if (parentTag != childTag && // coalesce duplicates
+        LikelyToAffectParsing(parentTag))
+    {
+      break;
+    }
+    aChild = parent;
+    childTag = parentTag;
+  }
+
+  return parent;
+}
+
+static PRUint32 // returns the depth of the stack
+CreateTagStack(nsTArray<nsString> &tagStack,
+               const nsIContent *content)
+{
+  nsAutoString uriStr, nameStr;
+
+  // just in case we have a text node
+  if (content && !content->IsNodeOfType(nsINode::eELEMENT))
+    content = content->GetParent();
+
+  while (content && content->IsNodeOfType(nsINode::eELEMENT)) {
+    nsString& tagName = *tagStack.AppendElement();
+    NS_ENSURE_TRUE(&tagName, NS_ERROR_OUT_OF_MEMORY);
+
+    content->NodeInfo()->GetQualifiedName(tagName);
+
+    // see if we need to add xmlns declarations
+    PRUint32 count = content->GetAttrCount();
+    PRBool setDefaultNamespace = PR_FALSE;
+    if (count > 0) {
+      PRUint32 index;
+
+      for (index = 0; index < count; index++) {
+        const nsAttrName* name = content->GetAttrNameAt(index);
+        if (name->NamespaceEquals(kNameSpaceID_XMLNS)) {
+          content->GetAttr(kNameSpaceID_XMLNS, name->LocalName(), uriStr);
+
+          // really want something like nsXMLContentSerializer::SerializeAttr
+          tagName.Append(NS_LITERAL_STRING(" xmlns")); // space important
+          if (name->GetPrefix()) {
+            tagName.Append(PRUnichar(':'));
+            name->LocalName()->ToString(nameStr);
+            tagName.Append(nameStr);
+          } else {
+            setDefaultNamespace = PR_TRUE;
+          }
+          tagName.Append(NS_LITERAL_STRING("=\"") + uriStr +
+            NS_LITERAL_STRING("\""));
+        }
+      }
+    }
+
+    if (!setDefaultNamespace) {
+      nsINodeInfo* info = content->NodeInfo();
+      if (!info->GetPrefixAtom() &&
+          info->NamespaceID() != kNameSpaceID_None) {
+        // We have no namespace prefix, but have a namespace ID.  Push
+        // default namespace attr in, so that our kids will be in our
+        // namespace.
+        info->GetNamespaceURI(uriStr);
+        tagName.Append(NS_LITERAL_STRING(" xmlns=\"") + uriStr +
+                       NS_LITERAL_STRING("\""));
+      }
+    }
+    // Note that we always include aContextNode, but not necessarily
+    // its parent('s parent)*.
+    content = GetSignificantParent(content);
+  }
+  return tagStack.Length();
+}
+
 NS_IMETHODIMP
 nsParser::ParseFragment(const nsAString& aSourceBuffer,
                         void* aKey,
-                        nsTArray<nsString>& aTagStack,
+                        nsIContent *aContextNode,
                         PRBool aXMLMode,
                         const nsACString& aMimeType,
                         nsDTDMode aMode)
 {
+  nsTArray<nsString> tagStack;
+  CreateTagStack(tagStack, aContextNode);
+  return ParseFragment(aSourceBuffer, aKey, tagStack,
+                       aXMLMode, aMimeType, aMode);
+}
+
+NS_IMETHODIMP
+nsParser::ParseFragment(const nsAString& aSourceBuffer,
+                        void* aKey,
+                        nsTArray<nsString> &aTagStack,
+                        PRBool aXMLMode,
+                        const nsACString& aMimeType,
+                        nsDTDMode aMode)
+{ 
   nsresult result = NS_OK;
   nsAutoString  theContext;
   PRUint32 theCount = aTagStack.Length();
   PRUint32 theIndex = 0;
 
   // Disable observers for fragments
   mFlags &= ~NS_PARSER_FLAG_OBSERVERS_ENABLED;
 
diff --git a/parser/htmlparser/src/nsParser.h b/parser/htmlparser/src/nsParser.h
--- a/parser/htmlparser/src/nsParser.h
+++ b/parser/htmlparser/src/nsParser.h
@@ -214,17 +214,23 @@ class nsParser : public nsIParser,
 
     NS_IMETHOD_(void *) GetRootContextKey();
 
     /**
      * This method needs documentation
      */
     NS_IMETHOD ParseFragment(const nsAString& aSourceBuffer,
                              void* aKey,
-                             nsTArray<nsString>& aTagStack,
+                             nsTArray<nsString> &aTagStack,
+                             PRBool aXMLMode,
+                             const nsACString& aContentType,
+                             nsDTDMode aMode = eDTDMode_autodetect);
+    NS_IMETHOD ParseFragment(const nsAString& aSourceBuffer,
+                             void* aKey,
+                             nsIContent *aContextNode,
                              PRBool aXMLMode,
                              const nsACString& aContentType,
                              nsDTDMode aMode = eDTDMode_autodetect);
 
 
     /**
      * This method gets called when the tokens have been consumed, and it's time
      * to build the model via the content sink.
