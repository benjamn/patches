Bug 484121 (4/6) - Let the parser call nsIContentSink::{Will,Did}BuildModel directly. r+sr=mrbkap

diff --git a/parser/htmlparser/public/nsIDTD.h b/parser/htmlparser/public/nsIDTD.h
--- a/parser/htmlparser/public/nsIDTD.h
+++ b/parser/htmlparser/public/nsIDTD.h
@@ -97,17 +97,17 @@ public:
                               nsIContentSink* aSink) = 0;
 
     /**
      * Called by the parser after the parsing process has concluded
      * @update  gess5/18/98
      * @param   anErrorCode - contains error code resulting from parse process
      * @return
      */
-    NS_IMETHOD DidBuildModel(nsresult anErrorCode, PRBool aNotifySink,
+    NS_IMETHOD DidBuildModel(nsresult anErrorCode,
                              nsIParser* aParser,
                              nsIContentSink* aSink) = 0;
 
     /**
      * Called by the parser after the parsing process has concluded
      * @update  gess5/18/98
      * @param   anErrorCode - contains error code resulting from parse process
      * @return
@@ -169,17 +169,17 @@ public:
      */
     NS_IMETHOD_(nsDTDMode) GetMode() const = 0;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIDTD, NS_IDTD_IID)
 
 #define NS_DECL_NSIDTD \
     NS_IMETHOD WillBuildModel(  const CParserContext& aParserContext, nsITokenizer* aTokenizer, nsIContentSink* aSink);\
-    NS_IMETHOD DidBuildModel(nsresult anErrorCode,PRBool aNotifySink,nsIParser* aParser,nsIContentSink* aSink);\
+    NS_IMETHOD DidBuildModel(nsresult anErrorCode,nsIParser* aParser,nsIContentSink* aSink);\
     NS_IMETHOD BuildModel(nsIParser* aParser,nsITokenizer* aTokenizer,nsITokenObserver* anObserver,nsIContentSink* aSink);\
     NS_IMETHOD HandleToken(CToken* aToken,nsIParser* aParser);\
     NS_IMETHOD_(PRBool) CanContain(PRInt32 aParent,PRInt32 aChild) const;\
     NS_IMETHOD_(PRBool) IsContainer(PRInt32 aTag) const;\
     NS_IMETHOD_(void)  Terminate();\
     NS_IMETHOD_(PRInt32) GetType();\
     NS_IMETHOD_(nsDTDMode) GetMode() const;
 #endif /* nsIDTD_h___ */
diff --git a/parser/htmlparser/src/CNavDTD.cpp b/parser/htmlparser/src/CNavDTD.cpp
--- a/parser/htmlparser/src/CNavDTD.cpp
+++ b/parser/htmlparser/src/CNavDTD.cpp
@@ -201,32 +201,25 @@ CNavDTD::WillBuildModel(const CParserCon
   mDTDMode = aParserContext.mDTDMode;
   mParserCommand = aParserContext.mParserCommand;
   mMimeType = aParserContext.mMimeType;
   mDocType = aParserContext.mDocType;
   mTokenizer = aTokenizer;
   mBodyContext->SetNodeAllocator(&mNodeAllocator);
 
   if (!aParserContext.mPrevContext && aSink) {
-    STOP_TIMER();
-    MOZ_TIMER_DEBUGLOG(("Stop: Parse Time: CNavDTD::WillBuildModel(), this=%p\n", this));
-    
-    result = aSink->WillBuildModel(GetMode());
-    
-    MOZ_TIMER_DEBUGLOG(("Start: Parse Time: CNavDTD::WillBuildModel(), this=%p\n", this));
-    START_TIMER();
 
-    if (NS_SUCCEEDED(result) && !mSink) {
+    if (!mSink) {
       mSink = do_QueryInterface(aSink, &result);
       if (NS_FAILED(result)) {
         mFlags |= NS_DTD_FLAG_STOP_PARSING;
         return result;
       }
     }
-    
+
     // Let's see if the environment is set up for us to write output to
     // a logging sink. If so, then we'll create one, and make it the
     // proxy for the real sink we're given from the parser.
 #ifdef NS_DEBUG
     nsLoggingSink *theLogSink = GetLoggingSink();
     if (theLogSink) {
       theLogSink->SetProxySink(mSink);
       mSink = theLogSink;
@@ -364,26 +357,25 @@ CNavDTD::BuildNeglectedTarget(eHTMLTags 
   CToken* target = mTokenAllocator->CreateTokenOfType(aType, aTarget);
   NS_ENSURE_TRUE(target, NS_ERROR_OUT_OF_MEMORY);
   mTokenizer->PushTokenFront(target);
   return BuildModel(aParser, mTokenizer, 0, aSink);
 }
 
 nsresult
 CNavDTD::DidBuildModel(nsresult anErrorCode,
-                       PRBool aNotifySink,
                        nsIParser* aParser,
                        nsIContentSink* aSink)
 {
   if (!aSink) {
     return NS_OK;
   }
 
   nsresult result = NS_OK;
-  if (aParser && aNotifySink) {
+  if (aParser) {
     if (NS_OK == anErrorCode) {
       if (!(mFlags & NS_DTD_FLAG_HAS_MAIN_CONTAINER)) {
         // This document is not a frameset document, however, it did not contain
         // a body tag either. So, make one!. Note: Body tag is optional per spec..
         // Also note: We ignore the return value of BuildNeglectedTarget, we
         // can't reasonably respond to errors (or requests to block) at this
         // point in the parsing process.
         BuildNeglectedTarget(eHTMLTag_body, eToken_start, aParser, aSink);
@@ -417,21 +409,17 @@ CNavDTD::DidBuildModel(nsresult anErrorC
         mBodyContext->mContextTopIndex = -1; 
       }
 
       // Now let's disable style handling to save time when closing remaining
       // stack members.
       mFlags &= ~NS_DTD_FLAG_ENABLE_RESIDUAL_STYLE;
       while (mBodyContext->GetCount() > 0) { 
         result = CloseContainersTo(mBodyContext->Last(), PR_FALSE);
-        if (NS_FAILED(result)) {
-          //No matter what, you need to call did build model.
-          aSink->DidBuildModel();
-          return result;
-        }
+        NS_ENSURE_SUCCESS(result, result);
       } 
     } else {
       // If you're here, then an error occured, but we still have nodes on the stack.
       // At a minimum, we should grab the nodes and recycle them.
       // Just to be correct, we'll also recycle the nodes.
       while (mBodyContext->GetCount() > 0) { 
         nsEntryStack* theChildStyles = 0;
         nsCParserNode* theNode = mBodyContext->Pop(theChildStyles);
@@ -443,18 +431,17 @@ CNavDTD::DidBuildModel(nsresult anErrorC
     // Now make sure the misplaced content list is empty,
     // by forcefully recycling any tokens we might find there.
     CToken* theToken = 0;
     while ((theToken = (CToken*)mMisplacedContent.Pop())) {
       IF_FREE(theToken, mTokenAllocator);
     }
   }
 
-  // No matter what, you need to call did build model.
-  return aSink->DidBuildModel(); 
+  return result;
 }
 
 NS_IMETHODIMP_(void) 
 CNavDTD::Terminate() 
 { 
   mFlags |= NS_DTD_FLAG_STOP_PARSING; 
 }
 
diff --git a/parser/htmlparser/src/nsExpatDriver.cpp b/parser/htmlparser/src/nsExpatDriver.cpp
--- a/parser/htmlparser/src/nsExpatDriver.cpp
+++ b/parser/htmlparser/src/nsExpatDriver.cpp
@@ -1289,45 +1289,38 @@ nsExpatDriver::WillBuildModel(const CPar
   }
 
   // Set up the user data.
   XML_SetUserData(mExpatParser, this);
 
   // XML must detect invalid character convertion
   aParserContext.mScanner->OverrideReplacementCharacter(0xffff);
 
-  return aSink->WillBuildModel(GetMode());
+  return mInternalState;
 }
 
 NS_IMETHODIMP
 nsExpatDriver::BuildModel(nsIParser* aParser,
                           nsITokenizer* aTokenizer,
                           nsITokenObserver* anObserver,
                           nsIContentSink* aSink)
 {
   return mInternalState;
 }
 
 NS_IMETHODIMP
 nsExpatDriver::DidBuildModel(nsresult anErrorCode,
-                             PRBool aNotifySink,
                              nsIParser* aParser,
                              nsIContentSink* aSink)
 {
   // Check for mSink is intentional. This would make sure
   // that DidBuildModel() is called only once on the sink.
-  nsresult result = NS_OK;
-  if (mSink) {
-    result = aSink->DidBuildModel();
-    mSink = nsnull;
-  }
-
+  mSink = nsnull;
   mExtendedSink = nsnull;
-
-  return result;
+  return NS_OK;
 }
 
 NS_IMETHODIMP
 nsExpatDriver::WillTokenize(PRBool aIsFinalChunk,
                             nsTokenAllocator* aTokenAllocator)
 {
   mIsFinalChunk = aIsFinalChunk;
   return NS_OK;
diff --git a/parser/htmlparser/src/nsParser.cpp b/parser/htmlparser/src/nsParser.cpp
--- a/parser/htmlparser/src/nsParser.cpp
+++ b/parser/htmlparser/src/nsParser.cpp
@@ -1482,16 +1482,67 @@ nsParser::CancelParsingEvents()
     mContinueEvent = nsnull;
     mFlags &= ~NS_PARSER_FLAG_PENDING_CONTINUE_EVENT;
   }
   return NS_OK;
 }
 
 ////////////////////////////////////////////////////////////////////////
 
+/**
+ * Evalutes EXPR1 and EXPR2 exactly once each, in that order.  Stores the value
+ * of EXPR2 in RV is EXPR2 fails, otherwise RV contains the result of EXPR1
+ * (which could be success or failure).
+ *
+ * To understand the motivation for this construct, consider these example
+ * methods:
+ *
+ *   nsresult nsSomething::DoThatThing(nsIWhatever* obj) {
+ *     nsresult rv = NS_OK;
+ *     ...
+ *     return obj->DoThatThing();
+ *     NS_ENSURE_SUCCESS(rv, rv);
+ *     ...
+ *     return rv;
+ *   }
+ *
+ *   void nsCaller::MakeThingsHappen() {
+ *     return mSomething->DoThatThing(mWhatever);
+ *   }
+ *
+ * Suppose, for whatever reason*, we want to shift responsibility for calling
+ * mWhatever->DoThatThing() from nsSomething::DoThatThing up to
+ * nsCaller::MakeThingsHappen.  We might rewrite the two methods as follows:
+ *
+ *   nsresult nsSomething::DoThatThing() {
+ *     nsresult rv = NS_OK;
+ *     ...
+ *     ...
+ *     return rv;
+ *   }
+ *
+ *   void nsCaller::MakeThingsHappen() {
+ *     nsresult rv;
+ *     PREFER_LATTER_ERROR_CODE(mSomething->DoThatThing(),
+ *                              mWhatever->DoThatThing(),
+ *                              rv);
+ *     return rv;
+ *   }
+ *
+ * *Possible reasons include: nsCaller doesn't want to give mSomething access
+ * to mWhatever, nsCaller wants to guarantee that mWhatever->DoThatThing() will
+ * be called regardless of how nsSomething::DoThatThing behaves, &c.
+ */
+#define PREFER_LATTER_ERROR_CODE(EXPR1, EXPR2, RV) {                          \
+  nsresult RV##__temp = EXPR1;                                                \
+  RV = EXPR2;                                                                 \
+  if (NS_FAILED(RV)) {                                                        \
+    RV = RV##__temp;                                                          \
+  }                                                                           \
+}
 
 /**
  * This gets called just prior to the model actually
  * being constructed. It's important to make this the
  * last thing that happens right before parsing, so we
  * can delay until the last moment the resolution of
  * which DTD to use (unless of course we're assigned one).
  */
@@ -1520,17 +1571,26 @@ nsParser::WillBuildModel(nsString& aFile
                "Clobbering DTD for non-root parser context!");
   mDTD = FindSuitableDTD(*mParserContext);
   NS_ENSURE_TRUE(mDTD, NS_ERROR_OUT_OF_MEMORY);
 
   nsITokenizer* tokenizer;
   nsresult rv = mParserContext->GetTokenizer(mDTD, mSink, tokenizer);
   NS_ENSURE_SUCCESS(rv, rv);
 
-  return mDTD->WillBuildModel(*mParserContext, tokenizer, mSink);
+  rv = mDTD->WillBuildModel(*mParserContext, tokenizer, mSink);
+  nsresult sinkResult = mSink->WillBuildModel(mDTD->GetMode());
+  // nsIDTD::WillBuildModel used to be responsible for calling
+  // nsIContentSink::WillBuildModel, but that obligation isn't expressible
+  // in the nsIDTD interface itself, so it's sounder and simpler to give that
+  // responsibility back to the parser. The former behavior of the DTD was to
+  // NS_ENSURE_SUCCESS the sink WillBuildModel call, so if the sink returns
+  // failure we should use sinkResult instead of rv, to preserve the old error
+  // handling behavior of the DTD:
+  return NS_FAILED(sinkResult) ? sinkResult : rv;
 }
 
 /**
  * This gets called when the parser is done with its input.
  * Note that the parser may have been called recursively, so we
  * have to check for a prev. context before closing out the DTD/sink.
  */
 nsresult
@@ -1540,17 +1600,26 @@ nsParser::DidBuildModel(nsresult anError
 
   if (IsComplete()) {
     if (mParserContext && !mParserContext->mPrevContext) {
       // Let sink know if we're about to end load because we've been terminated.
       // In that case we don't want it to run deferred scripts.
       PRBool terminated = mInternalState == NS_ERROR_HTMLPARSER_STOPPARSING;
       if (mDTD && mSink &&
           mSink->ReadyToCallDidBuildModel(terminated)) {
-        result = mDTD->DidBuildModel(anErrorCode,PR_TRUE,this,mSink);
+        nsresult dtdResult =  mDTD->DidBuildModel(anErrorCode,this,mSink),
+                sinkResult = mSink->DidBuildModel();
+        // nsIDTD::DidBuildModel used to be responsible for calling
+        // nsIContentSink::DidBuildModel, but that obligation isn't expressible
+        // in the nsIDTD interface itself, so it's sounder and simpler to give
+        // that responsibility back to the parser. The former behavior of the
+        // DTD was to NS_ENSURE_SUCCESS the sink DidBuildModel call, so if the
+        // sink returns failure we should use sinkResult instead of dtdResult,
+        // to preserve the old error handling behavior of the DTD:
+        result = NS_FAILED(sinkResult) ? sinkResult : dtdResult;
       }
 
       //Ref. to bug 61462.
       mParserContext->mRequest = 0;
     }
   }
 
   return result;
diff --git a/parser/htmlparser/src/nsViewSourceHTML.cpp b/parser/htmlparser/src/nsViewSourceHTML.cpp
--- a/parser/htmlparser/src/nsViewSourceHTML.cpp
+++ b/parser/htmlparser/src/nsViewSourceHTML.cpp
@@ -308,19 +308,18 @@ nsresult CViewSourceHTML::WillBuildModel
 
 
   if(eViewSource!=aParserContext.mParserCommand)
     mDocType=ePlainText;
   else mDocType=aParserContext.mDocType;
 
   mLineNumber = 1;
 
-  result = mSink->WillBuildModel(GetMode());
+  START_TIMER();
 
-  START_TIMER();
   return result;
 }
 
 /**
   * The parser uses a code sandwich to wrap the parsing process. Before
   * the process begins, WillBuildModel() is called. Afterwards the parser
   * calls DidBuildModel().
   * @update gess5/18/98
@@ -531,45 +530,44 @@ void CViewSourceHTML::AddAttrToNode(nsCP
 }
 
 /**
  *
  * @update  gess5/18/98
  * @param
  * @return
  */
-NS_IMETHODIMP CViewSourceHTML::DidBuildModel(nsresult anErrorCode,PRBool aNotifySink,nsIParser* aParser,nsIContentSink* aSink){
+NS_IMETHODIMP CViewSourceHTML::DidBuildModel(nsresult anErrorCode,nsIParser* aParser,nsIContentSink* aSink){
   nsresult result= NS_OK;
 
   //ADD CODE HERE TO CLOSE OPEN CONTAINERS...
 
   if(aParser){
 
     mParser=(nsParser*)aParser;  //debug XXX
     STOP_TIMER();
 
     mSink=(nsIHTMLContentSink*)aParser->GetContentSink();
-    if((aNotifySink) && (mSink)) {
+    if (mSink) {
         //now let's close automatically auto-opened containers...
 
 #ifdef DUMP_TO_FILE
       if(gDumpFile) {
         fprintf(gDumpFile, "</pre>\n");
         fprintf(gDumpFile, "</body>\n");
         fprintf(gDumpFile, "</html>\n");
         fclose(gDumpFile);
       }
 #endif // DUMP_TO_FILE
 
       if(ePlainText!=mDocType) {
         mSink->CloseContainer(eHTMLTag_pre);
         mSink->CloseContainer(eHTMLTag_body);
         mSink->CloseContainer(eHTMLTag_html);
       }
-      result = mSink->DidBuildModel();
     }
 
     START_TIMER();
 
   }
 
 #ifdef RAPTOR_PERF_METRICS
   NS_STOP_STOPWATCH(vsTimer);
