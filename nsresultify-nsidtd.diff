diff --git a/parser/htmlparser/public/nsIDTD.h b/parser/htmlparser/public/nsIDTD.h
--- a/parser/htmlparser/public/nsIDTD.h
+++ b/parser/htmlparser/public/nsIDTD.h
@@ -87,99 +87,102 @@ class nsIContentSink;
 class CParserContext;
 
 class nsIDTD : public nsISupports
 {
 public:
 
     NS_DECLARE_STATIC_IID_ACCESSOR(NS_IDTD_IID)
 
-    NS_IMETHOD WillBuildModel(const CParserContext& aParserContext,
-                              nsITokenizer* aTokenizer,
-                              nsIContentSink* aSink) = 0;
+    virtual nsresult
+    WillBuildModel(const CParserContext& aParserContext,
+                   nsITokenizer* aTokenizer,
+                   nsIContentSink* aSink) = 0;
 
     /**
      * Called by the parser after the parsing process has concluded
      * @update  gess5/18/98
      * @param   anErrorCode - contains error code resulting from parse process
      * @return
      */
-    NS_IMETHOD DidBuildModel(nsresult anErrorCode, PRBool aNotifySink) = 0;
+    virtual nsresult
+    DidBuildModel(nsresult anErrorCode, PRBool aNotifySink) = 0;
 
     /**
      * Called by the parser after the parsing process has concluded
      * @update  gess5/18/98
      * @param   anErrorCode - contains error code resulting from parse process
      * @return
      */
-    NS_IMETHOD BuildModel(nsITokenizer* aTokenizer,
-                          PRBool aCanInterrupt,
-                          PRBool aCountLines,
-                          const nsCString* aCharsetPtr) = 0;
+    virtual nsresult
+    BuildModel(nsITokenizer* aTokenizer,
+               PRBool aCanInterrupt,
+               PRBool aCountLines,
+               const nsCString* aCharsetPtr) = 0;
 
     /**
      * If the parse process gets interrupted midway, this method is
      * called by the parser prior to resuming the process.
      * @update  gess5/18/98
      * @return ignored
      */
-    NS_IMETHOD WillResumeParse() = 0;
+    virtual nsresult WillResumeParse() = 0;
 
     /**
      * If the parse process gets interrupted, this method is called by
      * the parser to notify the DTD that interruption will occur.
      * @update  gess5/18/98
      * @return ignored
      */
-    NS_IMETHOD WillInterruptParse() = 0;
+    virtual nsresult WillInterruptParse() = 0;
 
     /**
      * This method is called to determine whether or not a tag of one
      * type can contain a tag of another type.
      *
      * @update  gess 3/25/98
      * @param   aParent -- int tag of parent container
      * @param   aChild -- int tag of child container
      * @return PR_TRUE if parent can contain child
      */
-    NS_IMETHOD_(PRBool) CanContain(PRInt32 aParent,PRInt32 aChild) const = 0;
+    virtual PRBool CanContain(PRInt32 aParent,PRInt32 aChild) const = 0;
 
     /**
      * This method gets called to determine whether a given
      * tag is itself a container
      *
      * @update  gess 3/25/98
      * @param   aTag -- tag to test for containership
      * @return  PR_TRUE if given tag can contain other tags
      */
-    NS_IMETHOD_(PRBool) IsContainer(PRInt32 aTag) const = 0;
+    virtual PRBool IsContainer(PRInt32 aTag) const = 0;
 
     /**
      * Use this id you want to stop the building content model
      * --------------[ Sets DTD to STOP mode ]----------------
      * It's recommended to use this method in accordance with
      * the parser's terminate() method.
      *
      * @update  harishd 07/22/99
      * @param
      * @return
      */
-    NS_IMETHOD_(void) Terminate() = 0;
+    virtual void Terminate() = 0;
 
-    NS_IMETHOD_(PRInt32) GetType() = 0;
+    virtual PRInt32 GetType() = 0;
 
-    NS_IMETHOD_(nsITokenizer*) CreateTokenizer() = 0;
+    virtual nsITokenizer* CreateTokenizer() = 0;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIDTD, NS_IDTD_IID)
 
 #define NS_DECL_NSIDTD \
-    NS_IMETHOD WillBuildModel(  const CParserContext& aParserContext, nsITokenizer* aTokenizer, nsIContentSink* aSink);\
-    NS_IMETHOD DidBuildModel(nsresult anErrorCode, PRBool aNotifySink);\
-    NS_IMETHOD BuildModel(nsITokenizer* aTokenizer, PRBool aCanInterrupt, PRBool aCountLines, const nsCString* aCharsetPtr);\
-    NS_IMETHOD WillResumeParse();\
-    NS_IMETHOD WillInterruptParse();\
-    NS_IMETHOD_(PRBool) CanContain(PRInt32 aParent,PRInt32 aChild) const;\
-    NS_IMETHOD_(PRBool) IsContainer(PRInt32 aTag) const;\
-    NS_IMETHOD_(void)  Terminate();\
-    NS_IMETHOD_(PRInt32) GetType();\
-    NS_IMETHOD_(nsITokenizer*) CreateTokenizer();
+    nsresult WillBuildModel(  const CParserContext& aParserContext, nsITokenizer* aTokenizer, nsIContentSink* aSink);\
+    nsresult DidBuildModel(nsresult anErrorCode, PRBool aNotifySink);\
+    nsresult BuildModel(nsITokenizer* aTokenizer, PRBool aCanInterrupt, PRBool aCountLines, const nsCString* aCharsetPtr);\
+    nsresult WillResumeParse();\
+    nsresult WillInterruptParse();\
+    PRBool   CanContain(PRInt32 aParent,PRInt32 aChild) const;\
+    PRBool   IsContainer(PRInt32 aTag) const;\
+    void     Terminate();\
+    PRInt32  GetType();\
+    nsITokenizer* CreateTokenizer();
 #endif /* nsIDTD_h___ */
diff --git a/parser/htmlparser/src/CNavDTD.cpp b/parser/htmlparser/src/CNavDTD.cpp
--- a/parser/htmlparser/src/CNavDTD.cpp
+++ b/parser/htmlparser/src/CNavDTD.cpp
@@ -234,17 +234,17 @@ CNavDTD::WillBuildModel(const CParserCon
         mFlags |= NS_IPARSER_FLAG_SCRIPT_ENABLED;
       }
     }
   }
 
   return result;
 }
 
-NS_IMETHODIMP
+nsresult
 CNavDTD::BuildModel(nsITokenizer* aTokenizer,
                     PRBool aCanInterrupt,
                     PRBool aCountLines,
                     const nsCString*)
 {
   NS_PRECONDITION(mBodyContext != nsnull,
                   "Create a context before calling build model");
 
@@ -357,17 +357,17 @@ CNavDTD::BuildNeglectedTarget(eHTMLTags 
   // Always safe to disallow interruptions, so it doesn't matter that we've
   // forgotten the aCanInterrupt parameter to BuildModel.  Also, BuildModel
   // doesn't seem to care about the charset, and at this point we have no idea
   // what the charset was, so 0 can and must suffice.  If either of these
   // values mattered, we'd want to store them as data members in BuildModel.
   return BuildModel(mTokenizer, PR_FALSE, mCountLines, 0);
 }
 
-NS_IMETHODIMP
+nsresult
 CNavDTD::DidBuildModel(nsresult anErrorCode,
                        PRBool aNotifySink)
 {
   if (!mSink) {
     return NS_OK;
   }
 
   nsresult result = NS_OK;
@@ -440,30 +440,30 @@ CNavDTD::DidBuildModel(nsresult anErrorC
       IF_FREE(theToken, mTokenAllocator);
     }
   }
 
   // No matter what, you need to call did build model.
   return mSink->DidBuildModel(); 
 }
 
-NS_IMETHODIMP_(void) 
+void
 CNavDTD::Terminate() 
 { 
   mFlags |= NS_DTD_FLAG_STOP_PARSING; 
 }
 
 
-NS_IMETHODIMP_(PRInt32) 
+PRInt32
 CNavDTD::GetType() 
 { 
   return NS_IPARSER_FLAG_HTML; 
 }
 
-NS_IMETHODIMP_(nsITokenizer*)
+nsITokenizer*
 CNavDTD::CreateTokenizer()
 {
   return new nsHTMLTokenizer(mDTDMode, mDocType, mParserCommand, mSink);
 }
 
 /**
  * Text and some tags require a body when they're added, this function returns
  * true for those tags.
@@ -2121,17 +2121,17 @@ CNavDTD::CollectAttributes(nsIParserNode
  *  This method is called to determine whether or not a tag
  *  of one type can contain a tag of another type.
  *  
  *  @update  gess 4/8/98
  *  @param   aParent -- tag enum of parent container
  *  @param   aChild -- tag enum of child container
  *  @return  PR_TRUE if parent can contain child
  */
-NS_IMETHODIMP_(PRBool)
+PRBool
 CNavDTD::CanContain(PRInt32 aParent, PRInt32 aChild) const
 {
   PRBool result = gHTMLElements[aParent].CanContain((eHTMLTags)aChild, mDTDMode);
 
   if (eHTMLTag_nobr == aChild &&
       IsInlineElement(aParent, aParent) &&
       HasOpenContainer(eHTMLTag_nobr)) {
     return PR_FALSE;
