diff --git a/xpcom/glue/Functor.h b/xpcom/glue/Functor.h
--- a/xpcom/glue/Functor.h
+++ b/xpcom/glue/Functor.h
@@ -44,6 +44,7 @@
 #include "nsIRunnable.h"
 #include "nsAutoPtr.h"
 #include "TList.h"
+#include "nsRunnableFunctor.h"
 
 /**
  * For an overview of Functor usage, see bug 486440.
@@ -203,6 +204,10 @@
   Functor(ImplType* impl)   : mImpl(impl) {}
  ~Functor() {}
 
+  nsRefPtr<nsRunnableFunctor<Result, Functor> >
+  proxy(nsIThread* target,
+        PRUint32 flags = NS_DISPATCH_SYNC);
+
   template <typename Callable>
   static Functor callable(Callable c) {
     return Functor(new CallableHandler<Functor, Callable>(c));
@@ -638,4 +643,22 @@
 // [[[end]]]
 
 
+template <typename Result, class Params>
+nsRefPtr<nsRunnableFunctor<Result, Functor<Result, Params> > >
+Functor<Result, Params>::proxy(nsIThread* target, PRUint32 flags)
+{
+  static nsIThread* mainThread = nsnull;
+  if (!target && (mainThread || NS_SUCCEEDED(NS_GetMainThread(&mainThread))))
+      target = mainThread;
+
+  typedef nsRunnableFunctor<Result, Functor> Event;
+  nsRefPtr<Event> event(new Event(*this));
+
+  PRBool dispatched = target && NS_SUCCEEDED(target->Dispatch(event, flags));
+  NS_ASSERTION(dispatched, "Failed to dispatch event to thread.");
+
+  return event; // event->Wait() will block forever if Dispatch failed
+}
+
+
 #endif
diff --git a/xpcom/glue/Makefile.in b/xpcom/glue/Makefile.in
--- a/xpcom/glue/Makefile.in
+++ b/xpcom/glue/Makefile.in
@@ -126,6 +126,7 @@
 		nsXPTCUtils.h \
 		ThreadsafeSupports.h \
 		TList.h \
+		nsRunnableFunctor.h \
 		Functor.h \
 		Bind.h \
 		$(NULL)
diff --git a/xpcom/glue/nsRunnableFunctor.h b/xpcom/glue/nsRunnableFunctor.h
new file mode 100644
--- /dev/null
+++ b/xpcom/glue/nsRunnableFunctor.h
@@ -0,0 +1,93 @@
+#ifndef nsRunnableFunctor_h__
+#define nsRunnableFunctor_h__
+
+#include "nsISupports.h"
+#include "nsAutoPtr.h"
+#include "nsAutoLock.h"
+#include "nsIEventTarget.h"
+#include "nsThreadUtils.h"
+#include "nsProxyRelease.h"
+#include "ThreadsafeSupports.h"
+
+typedef ThreadsafeSupports<nsIRunnable>
+        ThreadsafeRunnable;
+
+class nsARunnableFunctor
+  : public ThreadsafeRunnable
+{
+  PRMonitor* const mMon;
+  PRBool mRun;
+public:
+  nsARunnableFunctor()
+    : mMon(nsAutoMonitor::NewMonitor("nsARunnableFunctor"))
+    , mRun(PR_FALSE)
+  {}
+  void Wait()
+  {
+    nsAutoMonitor mon(mMon);
+    if (!mRun)
+      mon.Wait();
+  }
+  NS_IMETHOD_(nsrefcnt) Release()
+  {
+    if (NS_IsMainThread())
+      return ThreadsafeRunnable::Release();
+    nsIThread* mainThread = nsnull;
+    NS_GetMainThread(&mainThread);
+    if (mainThread)
+      NS_ProxyRelease(mainThread, this);
+    return 1;
+  }
+protected:
+  ~nsARunnableFunctor()
+  {
+    nsAutoMonitor::DestroyMonitor(mMon);
+  }
+  nsresult AfterRun()
+  {
+    nsAutoMonitor mon(mMon);
+    mRun = PR_TRUE;
+    mon.NotifyAll();
+    return NS_OK;
+  }
+};
+
+template <typename Result, typename Functor>
+class nsRunnableFunctor
+  : public nsARunnableFunctor
+{
+  Result mResult;
+  Functor mFunctor;
+public:
+  nsRunnableFunctor(Functor functor)
+    : mFunctor(functor)
+  {}
+  Result& Wait()
+  {
+    nsARunnableFunctor::Wait();
+    return mResult;
+  }
+  NS_IMETHOD Run()
+  {
+    mResult = mFunctor();
+    return AfterRun();
+  }
+};
+
+template <typename Functor>
+class nsRunnableFunctor<void, Functor>
+  : public nsARunnableFunctor
+{
+  Functor mFunctor;
+public:
+  nsRunnableFunctor(Functor functor)
+    : mFunctor(functor)
+  {}
+  NS_IMETHOD Run()
+  {
+    mFunctor();
+    return AfterRun();
+  }
+};
+
+#endif
diff --git a/xpcom/tests/Makefile.in b/xpcom/tests/Makefile.in
--- a/xpcom/tests/Makefile.in
+++ b/xpcom/tests/Makefile.in
@@ -74,6 +74,7 @@
 		TestQuickReturn.cpp \
 		TestArguments.cpp \
 		TestFunctor.cpp \
+		TestRunnableFunctor.cpp \
 		$(NULL)
 
 ifndef MOZ_ENABLE_LIBXUL
diff --git a/xpcom/tests/TestRunnableFunctor.cpp b/xpcom/tests/TestRunnableFunctor.cpp
new file mode 100644
--- /dev/null
+++ b/xpcom/tests/TestRunnableFunctor.cpp
@@ -0,0 +1,36 @@
+#include <iostream>
+#include "nsAutoPtr.h"
+#include "Bind.h"
+
+int one() { return 1; }
+int plus_two(int x) { return x + 2; }
+
+void is(int x, int y) {
+  std::cout << (x == y ? "OK: " : "FAIL: ")
+            << x << " = " << y << std::endl;
+}
+
+void test() {
+  typedef Functor<int, TLIST0()> ftype;
+  typedef nsRunnableFunctor<int, ftype> rftype;
+
+  ftype f1 = functor(&one);
+  ftype f5 = BIND1(&plus_two, 3);
+
+  is((f5.proxy(nsnull)->Wait() -
+      f1.proxy(nsnull)->Wait()),
+     4);
+
+  nsRefPtr<rftype> rf1(new rftype(f1));
+  nsRefPtr<rftype> rf5(new rftype(f5));
+
+  rf1->Run();
+  rf5->Run();
+
+  is(rf1->Wait() + rf5->Wait(), 6);
+}
+
+int main() {
+  test();
+  return 0;
+}
