Runnable interface for Functors (bug 486440).

diff --git a/xpcom/glue/Functor.h b/xpcom/glue/Functor.h
--- a/xpcom/glue/Functor.h
+++ b/xpcom/glue/Functor.h
@@ -39,16 +39,17 @@
 #ifndef Functor_h__
 #define Functor_h__
 
 #include "nsISupports.h"
 #include "nsIRunnable.h"
 #include "nsAutoPtr.h"
 #include "TList.h"
 #include "Location.h"
+#include "RunnableFunctor.h"
 
 /**
  * For an overview of Functor usage, see bug 486440.
  *
  * This implementation was inspired by Andrei Alexandrescu's book
  *
  *   Modern C++ Design: Generic Programming and Design Patterns Applied,
  *
@@ -218,16 +219,20 @@ public:
   typedef FunctorImpl<Result, Params> ImplType;
   typedef Result ResultType;
   typedef Params ParamList;
 
   Functor(const Functor& f) : mImpl(f.mImpl) {}
   Functor(ImplType* impl)   : mImpl(impl) {}
  ~Functor() {} // deliberately non-virtual
 
+  nsRefPtr<RunnableFunctor<Result> >
+  proxy(nsIThread* target,
+        PRUint32 flags = NS_DISPATCH_SYNC);
+
   template <typename Callable>
   static Functor callable(Callable c) {
     return Functor(new CallableHandler<Functor, Callable>(c));
   }
 
   template <typename Method>
   static Functor method(Method m) {
     return Functor(new MethodHandler<Functor, Method>(m));
@@ -851,9 +856,27 @@ template <typename R, typename P0, typen
 Functor<R, TLIST10(P0, P1, P2, P3, P4, P5, P6, P7, P8, P9)>
 functor(R (*f)(P0, P1, P2, P3, P4, P5, P6, P7, P8, P9)) {
   return Functor<R, TLIST10(P0, P1, P2, P3, P4, P5, P6, P7, P8, P9)>::callable(f);
 }
 
 // [[[end]]]
 
 
+template <typename Result, class Params>
+nsRefPtr<RunnableFunctor<Result> >
+Functor<Result, Params>::proxy(nsIThread* target, PRUint32 flags)
+{
+  static nsIThread* mainThread = nsnull;
+  if (!target && (mainThread || NS_SUCCEEDED(NS_GetMainThread(&mainThread))))
+      target = mainThread;
+
+  nsRefPtr<RunnableFunctor<Result> > event =
+    new RunnableFunctorImpl<Result, Functor>(*this);
+
+  PRBool dispatched = target && NS_SUCCEEDED(target->Dispatch(event, flags));
+  NS_ASSERTION(dispatched, "Failed to dispatch event to thread.");
+
+  return event; // event->Wait() will block forever if Dispatch failed
+}
+
+
 #endif
diff --git a/xpcom/glue/Makefile.in b/xpcom/glue/Makefile.in
--- a/xpcom/glue/Makefile.in
+++ b/xpcom/glue/Makefile.in
@@ -124,16 +124,17 @@ SDK_HEADERS = \
 EXPORTS_NAMESPACES = mozilla
 
 EXPORTS = \
 		nsThreadUtils.h \
 		nsProxyRelease.h \
 		nsXPTCUtils.h \
 		Location.h \
 		TList.h \
+		RunnableFunctor.h \
 		Functor.h \
 		Bind.h \
 		$(NULL)
 
 EXPORTS_mozilla = \
   BlockingResourceBase.h \
   CondVar.h \
   DeadlockDetector.h \
diff --git a/xpcom/glue/RunnableFunctor.h b/xpcom/glue/RunnableFunctor.h
new file mode 100644
--- /dev/null
+++ b/xpcom/glue/RunnableFunctor.h
@@ -0,0 +1,142 @@
+#ifndef RunnableFunctor_h__
+#define RunnableFunctor_h__
+
+#include "nsISupports.h"
+#include "nsAutoPtr.h"
+#include "nsAutoLock.h"
+#include "nsIEventTarget.h"
+#include "nsThreadUtils.h"
+#include "nsProxyRelease.h"
+#include "nsIRunnable.h"
+
+class RunnableSupports : public nsIRunnable {
+  NS_DECL_ISUPPORTS
+protected:
+  virtual ~RunnableSupports() {}
+};
+inline NS_IMPL_THREADSAFE_ADDREF(RunnableSupports)
+inline NS_IMPL_THREADSAFE_RELEASE(RunnableSupports)
+inline NS_IMPL_THREADSAFE_QUERY_INTERFACE1(RunnableSupports, nsIRunnable)
+
+/**
+ * AbstractRunnableFunctor is so named because it inherits from
+ * RunnableSupports but does not implement the required Run method.
+ */
+template <typename Result>
+class RunnableFunctor
+  : public RunnableSupports
+{
+  PRMonitor* const mMon;
+  PRBool mRun;
+
+public:
+
+  RunnableFunctor()
+    : mMon(nsAutoMonitor::NewMonitor("RunnableFunctor"))
+    , mRun(PR_FALSE)
+  {}
+
+  /**
+   * If Wait is called before AfterRun, the Wait call will block until the
+   * monitor is notified.  If Wait is called after AfterRun, it will return
+   * immediately.
+   */
+  virtual Result Wait() = 0;
+
+protected:
+
+  ~RunnableFunctor()
+  {
+    nsAutoMonitor::DestroyMonitor(mMon);
+  }
+
+  void VoidWait() {
+    nsAutoMonitor mon(mMon);
+    if (!mRun)
+      mon.Wait();
+  }
+
+  /**
+   * Subclasses call this method just before their Run methods return.
+   */
+  nsresult AfterRun()
+  {
+    nsAutoMonitor mon(mMon);
+    mRun = PR_TRUE;
+    mon.NotifyAll();
+    return NS_OK;
+  }
+};
+
+/**
+ * This specialization of the RunnableFunctorImpl class provides space for the
+ * non-void value returned by the underlying Functor.  Its Wait method returns
+ * this stored value.
+ *
+ * TODO Return a reference to the stored value when possible; i.e., when the
+ * Result type is not already a reference.
+ */
+template <typename Result, typename Thunk>
+class RunnableFunctorImpl
+  : public RunnableFunctor<Result>
+{
+  Result mResult;
+  Thunk mThunk;
+
+  typedef RunnableFunctor<Result> BaseType;
+
+public:
+
+  // Using the term "thunk" to emphasize that the callable entity passed into
+  // the constructor must accept zero arguments, and also to avoid confusion
+  // with the Functor template class defined in Functor.h.
+  RunnableFunctorImpl(Thunk thunk)
+    : mThunk(thunk)
+  {}
+
+  Result Wait()
+  {
+    BaseType::VoidWait();
+    return mResult;
+  }
+
+  NS_IMETHOD Run()
+  {
+    mResult = mThunk();
+    return BaseType::AfterRun();
+  }
+
+};
+
+/**
+ * This specialization of the RunnableFunctorImpl class allocates no space for
+ * the return value of the underlying Functor, since the Functor is void.  In
+ * this case, it suffices to inherit the Wait method of RunnableFunctor.
+ */
+template <typename Thunk>
+class RunnableFunctorImpl<void, Thunk>
+  : public RunnableFunctor<void>
+{
+  Thunk mThunk;
+
+  typedef RunnableFunctor<void> BaseType;
+
+public:
+
+  RunnableFunctorImpl(Thunk thunk)
+    : mThunk(thunk)
+  {}
+
+  void Wait() {
+    BaseType::VoidWait();
+  }
+
+  NS_IMETHOD Run()
+  {
+    mThunk();
+    return BaseType::AfterRun();
+  }
+
+};
+
+#endif
diff --git a/xpcom/tests/functors/Makefile.in b/xpcom/tests/functors/Makefile.in
--- a/xpcom/tests/functors/Makefile.in
+++ b/xpcom/tests/functors/Makefile.in
@@ -58,16 +58,17 @@ STATIC_FAILURE_TESTCASES = \
 
 # Testcases that SHOULD compile but produce warnings.
 STATIC_WARNING_TESTCASES = \
   $(NULL)
 
 # Testcases that SHOULD compile and produce no warnings.
 STATIC_PASS_TESTCASES = \
   $(CPP_UNIT_TESTS) \
+  TestRunnableFunctor.cpp \
   $(NULL)
 
 REQUIRES = xpcom
 
 include $(topsrcdir)/config/rules.mk
 
 # We want to compile each file and invert the result to ensure that
 # compilation failed.
diff --git a/xpcom/tests/functors/TestRunnableFunctor.cpp b/xpcom/tests/functors/TestRunnableFunctor.cpp
new file mode 100644
--- /dev/null
+++ b/xpcom/tests/functors/TestRunnableFunctor.cpp
@@ -0,0 +1,43 @@
+#include <iostream>
+#include "nsAutoPtr.h"
+#include "Bind.h"
+#include "RunnableFunctor.h"
+#include "nsIRunnable.h"
+
+int one() { return 1; }
+int plus_two(int x) { return x + 2; }
+
+void is(int x, int y) {
+  std::cout << (x == y ? "OK: " : "FAIL: ")
+            << x << " = " << y << std::endl;
+}
+
+void test() {
+  typedef Functor<int, TLIST0()> ftype;
+  typedef RunnableFunctorImpl<int, ftype> rftype;
+
+  ftype f1 = functor(&one);
+  ftype f5 = BIND1(&plus_two, 3);
+
+  is((f5.proxy(nsnull)->Wait() -
+      f1.proxy(nsnull)->Wait()),
+     4);
+
+  nsRefPtr<rftype> rf1(new rftype(f1));
+  nsRefPtr<rftype> rf5(new rftype(f5));
+
+  rf1->Run();
+  rf5->Run();
+
+  is(rf1->Wait() + rf5->Wait(), 6);
+
+  static_cast<nsIRunnable*>(f1.proxy(0))->Run();
+
+  nsRefPtr<RunnableFunctor<int> > arf = f1.proxy(0).get();
+  is(plus_two(arf->Wait()), 3);
+}
+
+int main() {
+  // test();
+  return 0;
+}
