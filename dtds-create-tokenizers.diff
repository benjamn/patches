Calculating tokenizer flags in CParserContext::GetTokenizer.

diff --git a/parser/htmlparser/public/nsIDTD.h b/parser/htmlparser/public/nsIDTD.h
--- a/parser/htmlparser/public/nsIDTD.h
+++ b/parser/htmlparser/public/nsIDTD.h
@@ -54,19 +54,18 @@
  * */
 
 #include "nsISupports.h"
 #include "nsStringGlue.h"
 #include "prtypes.h"
 #include "nsITokenizer.h"
 
 #define NS_IDTD_IID \
-{ 0xcc374204, 0xcea2, 0x41a2, \
-  { 0xb2, 0x7f, 0x83, 0x75, 0xe2, 0xcf, 0x97, 0xcf } }
-
+{ 0x2dd14fc2, 0x3756, 0x4f9a, \
+  { 0xac, 0xfe, 0x1e, 0x86, 0x81, 0xcd, 0xdd, 0x04 } }
 
 enum eAutoDetectResult {
     eUnknownDetect,
     eValidDetect,
     ePrimaryDetect,
     eInvalidDetect
 };
 
@@ -87,19 +86,19 @@ class nsIContentSink;
 class CParserContext;
 
 class nsIDTD : public nsISupports
 {
 public:
 
     NS_DECLARE_STATIC_IID_ACCESSOR(NS_IDTD_IID)
 
-    NS_IMETHOD WillBuildModel(const CParserContext& aParserContext,
-                              nsITokenizer* aTokenizer,
-                              nsIContentSink* aSink) = 0;
+    NS_IMETHOD_(nsITokenizer*)
+    WillBuildModel(const CParserContext& aParserContext,
+                   nsIContentSink* aSink) = 0;
 
     /**
      * Called by the parser after the parsing process has concluded
      * @update  gess5/18/98
      * @param   anErrorCode - contains error code resulting from parse process
      * @return
      */
     NS_IMETHOD DidBuildModel(nsresult anErrorCode, PRBool aNotifySink,
@@ -178,19 +177,20 @@ public:
     NS_IMETHOD_(void) Terminate() = 0;
 
     NS_IMETHOD_(PRInt32) GetType() = 0;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIDTD, NS_IDTD_IID)
 
 #define NS_DECL_NSIDTD \
-    NS_IMETHOD WillBuildModel(  const CParserContext& aParserContext, nsITokenizer* aTokenizer, nsIContentSink* aSink);\
+    NS_IMETHOD_(nsITokenizer*) WillBuildModel(const CParserContext& aParserContext, nsIContentSink* aSink);\
     NS_IMETHOD DidBuildModel(nsresult anErrorCode,PRBool aNotifySink,nsIParser* aParser,nsIContentSink* aSink);\
     NS_IMETHOD BuildModel(nsIParser* aParser,nsITokenizer* aTokenizer,nsITokenObserver* anObserver,nsIContentSink* aSink);\
     NS_IMETHOD HandleToken(CToken* aToken,nsIParser* aParser);\
     NS_IMETHOD WillResumeParse(nsIContentSink* aSink = 0);\
     NS_IMETHOD WillInterruptParse(nsIContentSink* aSink = 0);\
     NS_IMETHOD_(PRBool) CanContain(PRInt32 aParent,PRInt32 aChild) const;\
     NS_IMETHOD_(PRBool) IsContainer(PRInt32 aTag) const;\
     NS_IMETHOD_(void)  Terminate();\
     NS_IMETHOD_(PRInt32) GetType();
+
 #endif /* nsIDTD_h___ */
diff --git a/parser/htmlparser/src/CNavDTD.cpp b/parser/htmlparser/src/CNavDTD.cpp
--- a/parser/htmlparser/src/CNavDTD.cpp
+++ b/parser/htmlparser/src/CNavDTD.cpp
@@ -185,31 +185,36 @@ CNavDTD::~CNavDTD()
       theLogSink->ReleaseProxySink();
     }
   }
 #endif
 }
 
 nsresult
 CNavDTD::WillBuildModel(const CParserContext& aParserContext,
-                        nsITokenizer* aTokenizer,
                         nsIContentSink* aSink)
 {
   nsresult result = NS_OK;
+  PRUint32 tokenizerFlags = CParserContext::GetTokenizerFlags(aSink);
 
   mFilename = aParserContext.mScanner->GetFilename();
-  mFlags = NS_DTD_FLAG_ENABLE_RESIDUAL_STYLE;
+  mFlags = tokenizerFlags | NS_DTD_FLAG_ENABLE_RESIDUAL_STYLE;
   mLineNumber = 1;
   mDTDMode = aParserContext.mDTDMode;
   mParserCommand = aParserContext.mParserCommand;
   mMimeType = aParserContext.mMimeType;
   mDocType = aParserContext.mDocType;
-  mTokenizer = aTokenizer;
   mBodyContext->SetNodeAllocator(&mNodeAllocator);
 
+  { nsITokenizer* tokenizer;
+    CParserContext* context = const_cast<CParserContext*>(&aParserContext);
+    nsresult rv = context->GetTokenizer(this, tokenizerFlags, tokenizer);
+    NS_ENSURE_SUCCESS(rv, rv);
+    mTokenizer = tokenizer; }
+
   if (!aParserContext.mPrevContext && aSink) {
     STOP_TIMER();
     MOZ_TIMER_DEBUGLOG(("Stop: Parse Time: CNavDTD::WillBuildModel(), this=%p\n", this));
     
     result = aSink->WillBuildModel();
     
     MOZ_TIMER_DEBUGLOG(("Start: Parse Time: CNavDTD::WillBuildModel(), this=%p\n", this));
     START_TIMER();
@@ -226,30 +231,17 @@ CNavDTD::WillBuildModel(const CParserCon
     // a logging sink. If so, then we'll create one, and make it the
     // proxy for the real sink we're given from the parser.
 #ifdef NS_DEBUG
     nsLoggingSink *theLogSink = GetLoggingSink();
     if (theLogSink) {
       theLogSink->SetProxySink(mSink);
       mSink = theLogSink;
     }
-#endif    
-
-   if (mSink) {
-      PRBool enabled = PR_TRUE;
-      mSink->IsEnabled(eHTMLTag_frameset, &enabled);
-      if (enabled) {
-        mFlags |= NS_IPARSER_FLAG_FRAMES_ENABLED;
-      }
-      
-      mSink->IsEnabled(eHTMLTag_script, &enabled);
-      if (enabled) {
-        mFlags |= NS_IPARSER_FLAG_SCRIPT_ENABLED;
-      }
-    }
+#endif
   }
 
   return result;
 }
 
 nsresult
 CNavDTD::BuildModel(nsIParser* aParser,
                     nsITokenizer* aTokenizer,
@@ -470,16 +462,22 @@ CNavDTD::Terminate()
 
 
 NS_IMETHODIMP_(PRInt32) 
 CNavDTD::GetType() 
 { 
   return NS_IPARSER_FLAG_HTML; 
 }
 
+NS_IMETHODIMP_(nsITokenizer*)
+CNavDTD::CreateTokenizer(PRUint32 aFlags)
+{
+  return new nsHTMLTokenizer(mDTDMode, mDocType, mParserCommand, aFlags);
+}
+
 /**
  * Text and some tags require a body when they're added, this function returns
  * true for those tags.
  *
  * @param aToken The current token that we care about.
  * @param aTokenizer A tokenizer that we can get the tags attributes off of.
  * @return PR_TRUE if aToken does indeed force the body to open.
  */
diff --git a/parser/htmlparser/src/CParserContext.cpp b/parser/htmlparser/src/CParserContext.cpp
--- a/parser/htmlparser/src/CParserContext.cpp
+++ b/parser/htmlparser/src/CParserContext.cpp
@@ -91,55 +91,38 @@ CParserContext::SetMimeType(const nsACSt
 #endif
            mMimeType.EqualsLiteral(kRDFApplicationContentType)   ||
            mMimeType.EqualsLiteral(kRDFTextContentType))
     mDocType = eXML;
 }
 
 nsresult
 CParserContext::GetTokenizer(nsIDTD* aDTD,
-                             nsIContentSink* aSink,
+                             PRUint32 aTokenizerFlags,
                              nsITokenizer*& aTokenizer)
 {
-  nsresult result = NS_OK;
-  PRInt32 type = aDTD ? aDTD->GetType() : NS_IPARSER_FLAG_HTML;
+  if (!mTokenizer) {
+    mTokenizer = aDTD->CreateTokenizer(aTokenizerFlags);
+    if (!mTokenizer)
+      return NS_ERROR_OUT_OF_MEMORY;
+    if (mPrevContext && mPrevContext->mTokenizer)
+      mTokenizer->CopyState(mPrevContext->mTokenizer);
+  }
+  aTokenizer = mTokenizer;
+  return NS_OK;
+}
 
-  if (!mTokenizer) {
-    if (type == NS_IPARSER_FLAG_HTML || mParserCommand == eViewSource) {
-      nsCOMPtr<nsIHTMLContentSink> theSink = do_QueryInterface(aSink);
-      PRUint16 theFlags = 0;
-
-      if (theSink) {
-        // XXX This code is repeated both here and in CNavDTD. Can the two
-        // callsites be combined?
-        PRBool enabled;
-        theSink->IsEnabled(eHTMLTag_frameset, &enabled);
-        if(enabled) {
-          theFlags |= NS_IPARSER_FLAG_FRAMES_ENABLED;
-        }
-        
-        theSink->IsEnabled(eHTMLTag_script, &enabled);
-        if(enabled) {
-          theFlags |= NS_IPARSER_FLAG_SCRIPT_ENABLED;
-        }
-      }
-
-      mTokenizer = new nsHTMLTokenizer(mDTDMode, mDocType,
-                                       mParserCommand, theFlags);
-      if (!mTokenizer) {
-        return NS_ERROR_OUT_OF_MEMORY;
-      }
-
-      // Make sure the new tokenizer has all of the necessary information.
-      // XXX this might not be necessary.
-      if (mPrevContext) {
-        mTokenizer->CopyState(mPrevContext->mTokenizer);
-      }
-    }
-    else if (type == NS_IPARSER_FLAG_XML) {
-      mTokenizer = do_QueryInterface(aDTD, &result);
-    }
+/*static*/ PRUint32
+CParserContext::GetTokenizerFlags(nsIContentSink* aSink)
+{
+  nsCOMPtr<nsIHTMLContentSink> sink(do_QueryInterface(aSink));
+  PRUint32 flags = 0;
+  if (sink) {
+    PRBool enabled;
+    sink->IsEnabled(eHTMLTag_frameset, &enabled);
+    if (enabled)
+      flags |= NS_IPARSER_FLAG_FRAMES_ENABLED;
+    sink->IsEnabled(eHTMLTag_script, &enabled);
+    if (enabled)
+      flags |= NS_IPARSER_FLAG_SCRIPT_ENABLED;
   }
-
-  aTokenizer = mTokenizer;
-
-  return result;
+  return flags;
 }
diff --git a/parser/htmlparser/src/CParserContext.h b/parser/htmlparser/src/CParserContext.h
--- a/parser/htmlparser/src/CParserContext.h
+++ b/parser/htmlparser/src/CParserContext.h
@@ -68,19 +68,22 @@ public:
                   void* aKey = 0,
                   eParserCommands aCommand = eViewNormal,
                   nsIRequestObserver* aListener = 0,
                   eAutoDetectResult aStatus = eUnknownDetect,
                   PRBool aCopyUnused = PR_FALSE);
 
     ~CParserContext();
 
+    static PRUint32 
+    GetTokenizerFlags(nsIContentSink* aSink);
     nsresult GetTokenizer(nsIDTD* aDTD,
-                          nsIContentSink* aSink,
+                          PRUint32 aTokenizerFlags,
                           nsITokenizer*& aTokenizer);
+
     void  SetMimeType(const nsACString& aMimeType);
 
     nsCOMPtr<nsIRequest> mRequest; // provided by necko to differnciate different input streams
                                    // why is mRequest strongly referenced? see bug 102376.
     nsCOMPtr<nsIRequestObserver> mListener;
     void* const          mKey;
     nsCOMPtr<nsITokenizer> mTokenizer;
     CParserContext* const mPrevContext;
diff --git a/parser/htmlparser/src/nsExpatDriver.cpp b/parser/htmlparser/src/nsExpatDriver.cpp
--- a/parser/htmlparser/src/nsExpatDriver.cpp
+++ b/parser/htmlparser/src/nsExpatDriver.cpp
@@ -1214,40 +1214,39 @@ nsExpatDriver::ConsumeToken(nsScanner& a
 
   PR_LOG(gExpatDriverLog, PR_LOG_DEBUG,
          ("Remaining in expat's buffer: %i, remaining in scanner: %i.",
           mExpatBuffered, Distance(currentExpatPosition, end)));
 
   return NS_SUCCEEDED(mInternalState) ? kEOF : NS_OK;
 }
 
-NS_IMETHODIMP
+NS_IMETHODIMP_(nsITokenizer*)
 nsExpatDriver::WillBuildModel(const CParserContext& aParserContext,
-                              nsITokenizer* aTokenizer,
                               nsIContentSink* aSink)
 {
   mSink = do_QueryInterface(aSink);
   if (!mSink) {
     NS_ERROR("nsExpatDriver didn't get an nsIExpatSink");
     // Make sure future calls to us bail out as needed
     mInternalState = NS_ERROR_UNEXPECTED;
-    return mInternalState;
+    return 0;
   }
 
   static const XML_Memory_Handling_Suite memsuite =
     {
       (void *(*)(size_t))PR_Malloc,
       (void *(*)(void *, size_t))PR_Realloc,
       PR_Free
     };
 
   static const PRUnichar kExpatSeparator[] = { kExpatSeparatorChar, '\0' };
 
   mExpatParser = XML_ParserCreate_MM(kUTF16, &memsuite, kExpatSeparator);
-  NS_ENSURE_TRUE(mExpatParser, NS_ERROR_FAILURE);
+  NS_ENSURE_TRUE(mExpatParser, 0);
 
   XML_SetReturnNSTriplet(mExpatParser, XML_TRUE);
 
 #ifdef XML_DTD
   XML_SetParamEntityParsing(mExpatParser, XML_PARAM_ENTITY_PARSING_ALWAYS);
 #endif
 
   mURISpec = aParserContext.mScanner->GetFilename();
@@ -1289,17 +1288,19 @@ nsExpatDriver::WillBuildModel(const CPar
   }
 
   // Set up the user data.
   XML_SetUserData(mExpatParser, this);
 
   // XML must detect invalid character convertion
   aParserContext.mScanner->OverrideReplacementCharacter(0xffff);
 
-  return aSink->WillBuildModel();
+  nsresult rv = aSink->WillBuildModel();
+  NS_ENSURE_SUCCESS(rv, 0);
+  return static_cast<nsITokenizer*>(this);
 }
 
 NS_IMETHODIMP
 nsExpatDriver::BuildModel(nsIParser* aParser,
                           nsITokenizer* aTokenizer,
                           nsITokenObserver* anObserver,
                           nsIContentSink* aSink)
 {
diff --git a/parser/htmlparser/src/nsHTMLTokenizer.cpp b/parser/htmlparser/src/nsHTMLTokenizer.cpp
--- a/parser/htmlparser/src/nsHTMLTokenizer.cpp
+++ b/parser/htmlparser/src/nsHTMLTokenizer.cpp
@@ -68,18 +68,18 @@ NS_IMPL_ISUPPORTS1(nsHTMLTokenizer, nsIT
  * 
  * @param  aParseMode The current mode the document is in (quirks, etc.)
  * @param  aDocType The document type of the current document
  * @param  aCommand What we are trying to do (view-source, parse a fragment, etc.)
  */
 nsHTMLTokenizer::nsHTMLTokenizer(PRInt32 aParseMode,
                                  eParserDocType aDocType,
                                  eParserCommands aCommand,
-                                 PRUint16 aFlags) :
-  nsITokenizer(), mTokenDeque(0), mFlags(aFlags)
+                                 PRUint32 aFlags)
+  : mTokenDeque(0), mFlags(aFlags)
 {
   if (aParseMode == eDTDMode_full_standards ||
       aParseMode == eDTDMode_almost_standards) {
     mFlags |= NS_IPARSER_FLAG_STRICT_MODE;
   } else if (aParseMode == eDTDMode_quirks)  {
     mFlags |= NS_IPARSER_FLAG_QUIRKS_MODE;
   } else if (aParseMode == eDTDMode_autodetect) {
     mFlags |= NS_IPARSER_FLAG_AUTO_DETECT_MODE;
diff --git a/parser/htmlparser/src/nsHTMLTokenizer.h b/parser/htmlparser/src/nsHTMLTokenizer.h
--- a/parser/htmlparser/src/nsHTMLTokenizer.h
+++ b/parser/htmlparser/src/nsHTMLTokenizer.h
@@ -48,16 +48,17 @@
 #include "nsISupports.h"
 #include "nsITokenizer.h"
 #include "nsIDTD.h"
 #include "prtypes.h"
 #include "nsDeque.h"
 #include "nsScanner.h"
 #include "nsHTMLTokens.h"
 #include "nsDTDUtils.h"
+#include "nsIHTMLContentSink.h"
 
 /***************************************************************
   Notes: 
  ***************************************************************/
 
 #ifdef _MSC_VER
 #pragma warning( disable : 4275 )
 #endif
@@ -65,17 +66,17 @@
 class nsHTMLTokenizer : public nsITokenizer {
 public:
   
   NS_DECL_ISUPPORTS
   NS_DECL_NSITOKENIZER
   nsHTMLTokenizer(PRInt32 aParseMode = eDTDMode_quirks,
                   eParserDocType aDocType = eHTML_Quirks,
                   eParserCommands aCommand = eViewNormal,
-                  PRUint16 aFlags = 0);
+                  PRUint32 aFlags = 0);
   virtual ~nsHTMLTokenizer();
 
 protected:
 
   nsresult ConsumeTag(PRUnichar aChar,CToken*& aToken,nsScanner& aScanner,PRBool& aFlushTokens);
   nsresult ConsumeStartTag(PRUnichar aChar,CToken*& aToken,nsScanner& aScanner,PRBool& aFlushTokens);
   nsresult ConsumeEndTag(PRUnichar aChar,CToken*& aToken,nsScanner& aScanner);
   nsresult ConsumeAttributes(PRUnichar aChar, CToken* aToken, nsScanner& aScanner);
diff --git a/parser/htmlparser/src/nsParser.cpp b/parser/htmlparser/src/nsParser.cpp
--- a/parser/htmlparser/src/nsParser.cpp
+++ b/parser/htmlparser/src/nsParser.cpp
@@ -459,17 +459,18 @@ nsSpeculativeScriptThread::StartParsing(
       return NS_ERROR_OUT_OF_MEMORY;
     }
 
     if (!mPreloadedURIs.Init(15)) {
       return NS_ERROR_OUT_OF_MEMORY;
     }
 
     mTokenizer = new nsHTMLTokenizer(context->mDTDMode, context->mDocType,
-                                     context->mParserCommand, 0);
+                                     context->mParserCommand,
+                                     CParserContext::GetTokenizerFlags(sink));
     if (!mTokenizer) {
       return NS_ERROR_OUT_OF_MEMORY;
     }
     mTokenizer->CopyState(context->mTokenizer);
     context->mScanner->CopyUnusedData(toScan);
     if (toScan.IsEmpty()) {
       return NS_OK;
     }
@@ -1509,20 +1510,21 @@ nsParser::WillBuildModel(nsString& aFile
   }
 
   NS_ASSERTION(!mDTD || !mParserContext->mPrevContext,
                "Clobbering DTD for non-root parser context!");
   mDTD = FindSuitableDTD(*mParserContext);
   NS_ENSURE_TRUE(mDTD, NS_ERROR_OUT_OF_MEMORY);
 
   nsITokenizer* tokenizer;
-  nsresult rv = mParserContext->GetTokenizer(mDTD, mSink, tokenizer);
+  PRUint32 tokenizerFlags = CParserContext::GetTokenizerFlags(mSink);
+  nsresult rv = mParserContext->GetTokenizer(mDTD, tokenizerFlags, tokenizer);
   NS_ENSURE_SUCCESS(rv, rv);
 
-  return mDTD->WillBuildModel(*mParserContext, tokenizer, mSink);
+  return mDTD->WillBuildModel(*mParserContext, mSink);
 }
 
 /**
  * This gets called when the parser is done with its input.
  * Note that the parser may have been called recursively, so we
  * have to check for a prev. context before closing out the DTD/sink.
  */
 nsresult
@@ -2359,17 +2361,18 @@ nsParser::ResumeParse(PRBool allowIterat
  */
 nsresult
 nsParser::BuildModel()
 {
   nsITokenizer* theTokenizer = nsnull;
 
   nsresult result = NS_OK;
   if (mParserContext) {
-    result = mParserContext->GetTokenizer(mDTD, mSink, theTokenizer);
+    PRUint32 tokenizerFlags = CParserContext::GetTokenizerFlags(mSink);
+    result = mParserContext->GetTokenizer(mDTD, tokenizerFlags, theTokenizer);
   }
 
   if (NS_SUCCEEDED(result)) {
     if (mDTD) {
       MOZ_TIMER_START(mDTDTime);
       result = mDTD->BuildModel(this, theTokenizer, nsnull, mSink);
       MOZ_TIMER_STOP(mDTDTime);
     }
@@ -2982,17 +2985,19 @@ nsParser::OnStopRequest(nsIRequest *requ
 PRBool
 nsParser::WillTokenize(PRBool aIsFinalChunk)
 {
   if (!mParserContext) {
     return PR_TRUE;
   }
 
   nsITokenizer* theTokenizer;
-  nsresult result = mParserContext->GetTokenizer(mDTD, mSink, theTokenizer);
+  PRUint32 tokenizerFlags = CParserContext::GetTokenizerFlags(mSink);
+  nsresult result = mParserContext->GetTokenizer(mDTD, tokenizerFlags,
+                                                 theTokenizer);
   NS_ENSURE_SUCCESS(result, PR_FALSE);
   return NS_SUCCEEDED(theTokenizer->WillTokenize(aIsFinalChunk,
                                                  &mTokenAllocator));
 }
 
 
 /**
  * This is the primary control routine to consume tokens.
@@ -3000,17 +3005,18 @@ nsParser::WillTokenize(PRBool aIsFinalCh
  * you run out of data.
  */
 nsresult nsParser::Tokenize(PRBool aIsFinalChunk)
 {
   nsITokenizer* theTokenizer;
 
   nsresult result = NS_ERROR_NOT_AVAILABLE;
   if (mParserContext) {
-    result = mParserContext->GetTokenizer(mDTD, mSink, theTokenizer);
+    PRUint32 tokenizerFlags = CParserContext::GetTokenizerFlags(mSink);
+    result = mParserContext->GetTokenizer(mDTD, tokenizerFlags, theTokenizer);
   }
 
   if (NS_SUCCEEDED(result)) {
     if (mFlags & NS_PARSER_FLAG_FLUSH_TOKENS) {
       // For some reason tokens didn't get flushed (probably
       // the parser got blocked before all the tokens in the
       // stack got handled). Flush 'em now. Ref. bug 104856
       if (theTokenizer->GetCount() != 0) {
@@ -3075,17 +3081,19 @@ nsresult nsParser::Tokenize(PRBool aIsFi
 PRBool
 nsParser::DidTokenize(PRBool aIsFinalChunk)
 {
   if (!mParserContext) {
     return PR_TRUE;
   }
 
   nsITokenizer* theTokenizer;
-  nsresult rv = mParserContext->GetTokenizer(mDTD, mSink, theTokenizer);
+  PRUint32 tokenizerFlags = CParserContext::GetTokenizerFlags(mSink);
+  nsresult rv = mParserContext->GetTokenizer(mDTD, tokenizerFlags,
+                                             theTokenizer);
   NS_ENSURE_SUCCESS(rv, PR_FALSE);
 
   rv = theTokenizer->DidTokenize(aIsFinalChunk);
   return NS_SUCCEEDED(rv);
 }
 
 /**
  * Get the channel associated with this parser
diff --git a/parser/htmlparser/src/nsViewSourceHTML.cpp b/parser/htmlparser/src/nsViewSourceHTML.cpp
--- a/parser/htmlparser/src/nsViewSourceHTML.cpp
+++ b/parser/htmlparser/src/nsViewSourceHTML.cpp
@@ -257,19 +257,18 @@ CViewSourceHTML::~CViewSourceHTML(){
   * the process begins, WillBuildModel() is called. Afterwards the parser
   * calls DidBuildModel().
   * @update rickg 03.20.2000
   * @param  aParserContext
   * @param  aSink
   * @return error code (almost always 0)
   */
 nsresult CViewSourceHTML::WillBuildModel(const CParserContext& aParserContext,
-                                         nsITokenizer* aTokenizer,
-                                         nsIContentSink* aSink){
-
+                                         nsIContentSink* aSink)
+{
   nsresult result=NS_OK;
 
 #ifdef RAPTOR_PERF_METRICS
   vsTimer.Reset();
   NS_START_STOPWATCH(vsTimer);
 #endif
 
   STOP_TIMER();
@@ -281,17 +280,16 @@ nsresult CViewSourceHTML::WillBuildModel
     mFilename = Substring(contextFilename,
                           12, // The length of "view-source:"
                           contextFilename.Length() - 12);
 
     mDocType=aParserContext.mDocType;
     mMimeType=aParserContext.mMimeType;
     mDTDMode=aParserContext.mDTDMode;
     mParserCommand=aParserContext.mParserCommand;
-    mTokenizer = aTokenizer;
 
 #ifdef DUMP_TO_FILE
     if (gDumpFile) {
 
       fprintf(gDumpFile, "<html>\n");
       fprintf(gDumpFile, "<head>\n");
       fprintf(gDumpFile, "<title>");
       fprintf(gDumpFile, "Source of: ");
@@ -316,21 +314,30 @@ nsresult CViewSourceHTML::WillBuildModel
   // the original source was quirks.  The CONST_CAST is evil, but the other
   // options seem to be:
   // 1) Change the WillBuildModel signature to take an nsIParser so that we can
   //    push a new parser context right here.
   // 2) Make some assumptions about the exact class of mSink and get at the
   //    document that way.
   // #1 doesn't seem worth it, and #2 is even more evil, since we plan to reset
   // the DTD mode right back to what it was before, let's risk this.
-  CParserContext& parserContext = const_cast<CParserContext&>(aParserContext);
-  parserContext.mDTDMode = eDTDMode_full_standards;
-  result = mSink->WillBuildModel();
-  // And reset the DTD mode back to the right one
-  parserContext.mDTDMode = mDTDMode;
+  {
+    CParserContext* context = const_cast<CParserContext*>(&aParserContext);
+    context->mDTDMode = eDTDMode_full_standards;
+    nsITokenizer* tokenizer;
+    result = context->GetTokenizer(this,
+                                   CParserContext::GetTokenizerFlags(aSink),
+                                   tokenizer);
+    if (NS_SUCCEEDED(result)) {
+      mTokenizer = tokenizer;
+      result = mSink->WillBuildModel();
+    }
+    // And reset the DTD mode back to the right one
+    context->mDTDMode = mDTDMode;
+  }
   START_TIMER();
   return result;
 }
 
 /**
   * The parser uses a code sandwich to wrap the parsing process. Before
   * the process begins, WillBuildModel() is called. Afterwards the parser
   * calls DidBuildModel().
@@ -606,16 +613,22 @@ NS_IMETHODIMP_(void)
 CViewSourceHTML::Terminate() {
 }
 
 NS_IMETHODIMP_(PRInt32)
 CViewSourceHTML::GetType() {
   return NS_IPARSER_FLAG_HTML;
 }
 
+NS_IMETHODIMP_(nsITokenizer*)
+CViewSourceHTML::CreateTokenizer(PRUint32 aFlags)
+{
+  return new nsHTMLTokenizer(mDTDMode, mDocType, mParserCommand, aFlags);
+}
+
 /**
  *
  * @update  gess5/18/98
  * @param
  * @return
  */
 NS_IMETHODIMP CViewSourceHTML::WillResumeParse(nsIContentSink* aSink){
   nsresult result = NS_OK;
