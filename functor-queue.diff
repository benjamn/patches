diff --git a/xpcom/glue/FunctorQueue.h b/xpcom/glue/FunctorQueue.h
new file mode 100644
--- /dev/null
+++ b/xpcom/glue/FunctorQueue.h
@@ -0,0 +1,223 @@
+#ifndef __functorqueue_h__
+#define __functorqueue_h__
+
+#include "nsISupports.h"
+#include "nsAutoPtr.h"
+#include "nsAutoLock.h"
+#include "nsIEventTarget.h"
+#include "nsThreadUtils.h"
+#include "Functor.h"
+
+#include <vector>
+
+
+class PayloadSupport
+{
+  nsAutoRefCnt mRefCnt;
+  NS_DECL_OWNINGTHREAD
+public:
+  NS_IMPL_ADDREF(PayloadSupport)
+  NS_IMPL_RELEASE(PayloadSupport)
+protected:
+  virtual ~PayloadSupport() {}
+};
+
+class PayloadBase : private PayloadSupport
+{
+  friend class FunctorQueue;
+
+  PRMonitor* const mMon;
+  PRBool mDelivered;
+
+public:
+
+  PayloadBase()
+    : mMon(nsAutoMonitor::NewMonitor("PayloadBase"))
+    , mDelivered(PR_FALSE)
+  {}
+
+  void AddRef() { PayloadSupport::AddRef(); }
+  void Release() { Release(NS_IsMainThread()); }
+  void Release(PRBool isMainThread) {
+    if (isMainThread)
+      PayloadSupport::Release();
+    else
+      NS_DispatchToMainThread(NS_NEW_RUNNABLE_METHOD(PayloadSupport,
+        static_cast<PayloadSupport*>(this), Release));
+  }
+
+  void Wait()
+  {
+    nsAutoMonitor mon(mMon);
+    if (!mDelivered)
+      mon.Wait();
+  }
+
+  virtual ~PayloadBase()
+  {
+    nsAutoMonitor::DestroyMonitor(mMon);
+  }
+
+protected:
+
+  virtual void Deliver() = 0;
+  void PostDelivery()
+  {
+    nsAutoMonitor mon(mMon);
+    mDelivered = PR_TRUE;
+    mon.NotifyAll();
+  }
+
+};
+
+
+template <typename Result>
+class Payload : public PayloadBase
+{
+  Result mResult;
+  typedef Functor<Result, TLIST0()> functor_type;
+  functor_type mFun;
+
+public:
+
+  Payload(functor_type fun) : mFun(fun) {}
+
+  Result& Wait()
+  {
+    PayloadBase::Wait();
+    return mResult;
+  }
+
+protected:
+
+  void Deliver() {
+    mResult = mFun();
+    PostDelivery();
+  }
+
+};
+
+
+template <>
+class Payload<void> : public PayloadBase
+{
+  typedef Functor<void, TLIST0()> functor_type;
+  functor_type mFun;
+
+public:
+
+  Payload(functor_type fun) : mFun(fun) {}
+
+protected:
+
+  void Deliver() {
+    mFun();
+    PostDelivery();
+  }
+
+};
+
+
+class FunctorQueue
+{
+  typedef std::vector<PayloadBase*> queue_type;
+
+  PRLock* mLock;
+  queue_type mQueue;
+
+  nsAutoRefCnt mRefCnt;
+
+public:
+
+  FunctorQueue()
+    : mLock(nsAutoLock::NewLock("FunctorQueue"))
+  {}
+
+  NS_IMPL_THREADSAFE_ADDREF(FunctorQueue)
+  NS_IMPL_THREADSAFE_RELEASE(FunctorQueue)
+
+  virtual ~FunctorQueue()
+  {
+    NS_ASSERTION(mQueue.empty(), "Deleting non-empty FunctorQueue");
+    nsAutoLock::DestroyLock(mLock);
+  }
+
+  virtual void Flush()
+  {
+    queue_type temp;
+
+    { nsAutoLock sync(mLock);
+      temp = mQueue;
+      mQueue.clear(); }
+
+    PRBool isMainThread = NS_IsMainThread();
+
+    queue_type::const_iterator end = temp.end();
+    for (queue_type::iterator it = temp.begin(); end != it; ++it)
+    {
+      PayloadBase* const pl = *it;
+      pl->Deliver();
+      pl->Release(isMainThread);
+    }
+  }
+
+  // Despite the name, subclasses may implement AsyncFlush synchronously:
+  virtual void AsyncFlush() = 0;
+
+  template <typename Result>
+  nsRefPtr<Payload<Result> >
+  Enqueue(Functor<Result, TLIST0()> f)
+  {
+    nsRefPtr<Payload<Result> >
+      pl(new Payload<Result>(f));
+    NS_ENSURE_TRUE(pl, 0);
+
+    pl->AddRef(); // balances the Release call in Flush
+
+    { nsAutoLock sync(mLock);
+      mQueue.push_back(pl); }
+
+    AsyncFlush();
+
+    // pl's refcnt still >= 1, even if already Flushed
+    return pl;
+  }
+
+};
+
+class nsFunctorQueue
+  : public FunctorQueue
+{
+  nsRefPtr<nsIEventTarget> mTarget;
+  const void* mPendingEvent;
+
+public:
+
+  nsFunctorQueue(nsIEventTarget* target)
+    : mTarget(target)
+    , mPendingEvent(nsnull)
+  {}
+
+  void Flush() {
+    mPendingEvent = nsnull;
+    FunctorQueue::Flush();
+  }
+
+  void AsyncFlush()
+  {
+    PRBool sameThread;
+    // TODO IsOnCurrentThread not safe for threadpools!!!
+    if (NS_SUCCEEDED(mTarget->IsOnCurrentThread(&sameThread)) && !sameThread) {
+      if (mPendingEvent)
+        return;
+      nsIRunnable* event = NS_NEW_RUNNABLE_METHOD(nsFunctorQueue, this, Flush);
+      mTarget->Dispatch(event, NS_DISPATCH_NORMAL);
+      mPendingEvent = event;
+    } else {
+      Flush();
+    }
+  }
+
+};
+
+#endif
\ No newline at end of file
diff --git a/xpcom/glue/Makefile.in b/xpcom/glue/Makefile.in
--- a/xpcom/glue/Makefile.in
+++ b/xpcom/glue/Makefile.in
@@ -129,6 +129,7 @@
 		TList.h \
 		Functor.h \
 		Bind.h \
+		FunctorQueue.h \
 		$(NULL)
 
 SDK_LIBRARY     =                        \
