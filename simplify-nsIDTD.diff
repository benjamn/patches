Bug 484121 - Avoid repeatedly passing nsIContentSink parameters to nsIDTD methods.

diff --git a/parser/htmlparser/public/nsIDTD.h b/parser/htmlparser/public/nsIDTD.h
--- a/parser/htmlparser/public/nsIDTD.h
+++ b/parser/htmlparser/public/nsIDTD.h
@@ -98,40 +98,25 @@ public:
 
     /**
      * Called by the parser after the parsing process has concluded
      * @update  gess5/18/98
      * @param   anErrorCode - contains error code resulting from parse process
      * @return
      */
     NS_IMETHOD DidBuildModel(nsresult anErrorCode,
-                             nsIParser* aParser,
-                             nsIContentSink* aSink) = 0;
+                             nsIParser* aParser) = 0;
 
     /**
      * Called by the parser after the parsing process has concluded
      * @update  gess5/18/98
      * @param   anErrorCode - contains error code resulting from parse process
      * @return
      */
-    NS_IMETHOD BuildModel(nsIParser* aParser, nsITokenizer* aTokenizer,
-                          nsITokenObserver* anObserver,
-                          nsIContentSink* aSink) = 0;
-
-    /**
-     * Called during model building phase of parse process. Each token
-     * created during the parse phase is stored in a deque (in the
-     * parser) and are passed to this method so that the DTD can
-     * process the token. Ultimately, the DTD will transform given
-     * token into calls onto a contentsink.
-     * @update  gess 3/25/98
-     * @param   aToken -- token object to be put into content model
-     * @return error code (usually 0)
-     */
-    NS_IMETHOD HandleToken(CToken* aToken,nsIParser* aParser) = 0;
+    NS_IMETHOD BuildModel(nsIParser* aParser, nsITokenizer* aTokenizer) = 0;
 
     /**
      * This method is called to determine whether or not a tag of one
      * type can contain a tag of another type.
      *
      * @update  gess 3/25/98
      * @param   aParent -- int tag of parent container
      * @param   aChild -- int tag of child container
@@ -169,17 +154,16 @@ public:
      */
     NS_IMETHOD_(nsDTDMode) GetMode() const = 0;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsIDTD, NS_IDTD_IID)
 
 #define NS_DECL_NSIDTD \
     NS_IMETHOD WillBuildModel(  const CParserContext& aParserContext, nsITokenizer* aTokenizer, nsIContentSink* aSink);\
-    NS_IMETHOD DidBuildModel(nsresult anErrorCode,nsIParser* aParser,nsIContentSink* aSink);\
-    NS_IMETHOD BuildModel(nsIParser* aParser,nsITokenizer* aTokenizer,nsITokenObserver* anObserver,nsIContentSink* aSink);\
-    NS_IMETHOD HandleToken(CToken* aToken,nsIParser* aParser);\
+    NS_IMETHOD DidBuildModel(nsresult anErrorCode,nsIParser* aParser);\
+    NS_IMETHOD BuildModel(nsIParser* aParser,nsITokenizer* aTokenizer);\
     NS_IMETHOD_(PRBool) CanContain(PRInt32 aParent,PRInt32 aChild) const;\
     NS_IMETHOD_(PRBool) IsContainer(PRInt32 aTag) const;\
     NS_IMETHOD_(void)  Terminate();\
     NS_IMETHOD_(PRInt32) GetType();\
     NS_IMETHOD_(nsDTDMode) GetMode() const;
 #endif /* nsIDTD_h___ */
diff --git a/parser/htmlparser/public/nsITokenizer.h b/parser/htmlparser/public/nsITokenizer.h
--- a/parser/htmlparser/public/nsITokenizer.h
+++ b/parser/htmlparser/public/nsITokenizer.h
@@ -51,24 +51,16 @@
 class CToken;
 class nsScanner;
 class nsDeque;
 class nsTokenAllocator;
 
 #define NS_ITOKENIZER_IID      \
   {0xe4238ddc, 0x9eb6,  0x11d2, {0xba, 0xa5, 0x0,     0x10, 0x4b, 0x98, 0x3f, 0xd4 }}
 
-/**
- * This interface is used as a callback to objects interested
- * in observing the token stream created from the parse process.
- */
-class nsITokenObserver {
-public:
-  virtual PRBool  operator()(CToken* aToken)=0;
-};
 
 /***************************************************************
   Notes: 
  ***************************************************************/
 
 
 class nsITokenizer : public nsISupports {
 public:
diff --git a/parser/htmlparser/src/CNavDTD.cpp b/parser/htmlparser/src/CNavDTD.cpp
--- a/parser/htmlparser/src/CNavDTD.cpp
+++ b/parser/htmlparser/src/CNavDTD.cpp
@@ -183,17 +183,17 @@ CNavDTD::~CNavDTD()
     nsLoggingSink *theLogSink = GetLoggingSink();
     if (mSink == theLogSink) {
       theLogSink->ReleaseProxySink();
     }
   }
 #endif
 }
 
-nsresult
+NS_IMETHODIMP
 CNavDTD::WillBuildModel(const CParserContext& aParserContext,
                         nsITokenizer* aTokenizer,
                         nsIContentSink* aSink)
 {
   nsresult result = NS_OK;
 
   mFilename = aParserContext.mScanner->GetFilename();
   mFlags = NS_DTD_FLAG_ENABLE_RESIDUAL_STYLE;
@@ -228,21 +228,19 @@ CNavDTD::WillBuildModel(const CParserCon
 
     mFlags |= nsHTMLTokenizer::GetFlags(aSink);
 
   }
 
   return result;
 }
 
-nsresult
+NS_IMETHODIMP
 CNavDTD::BuildModel(nsIParser* aParser,
-                    nsITokenizer* aTokenizer,
-                    nsITokenObserver* anObserver,
-                    nsIContentSink* aSink)
+                    nsITokenizer* aTokenizer)
 {
   NS_PRECONDITION(mBodyContext != nsnull,
                   "Create a context before calling build model");
 
   nsresult result = NS_OK;
 
   if (!aTokenizer || !aParser) {
     return NS_OK;
@@ -340,50 +338,48 @@ CNavDTD::BuildModel(nsIParser* aParser,
 
   mTokenizer = oldTokenizer;
   return result;
 }
 
 nsresult
 CNavDTD::BuildNeglectedTarget(eHTMLTags aTarget,
                               eHTMLTokenTypes aType,
-                              nsIParser* aParser,
-                              nsIContentSink* aSink)
+                              nsIParser* aParser)
 { 
   NS_ASSERTION(mTokenizer, "tokenizer is null! unable to build target.");
   NS_ASSERTION(mTokenAllocator, "unable to create tokens without an allocator.");
   if (!mTokenizer || !mTokenAllocator) {
     return NS_OK;
   }
 
   CToken* target = mTokenAllocator->CreateTokenOfType(aType, aTarget);
   NS_ENSURE_TRUE(target, NS_ERROR_OUT_OF_MEMORY);
   mTokenizer->PushTokenFront(target);
-  return BuildModel(aParser, mTokenizer, 0, aSink);
+  return BuildModel(aParser, mTokenizer);
 }
 
-nsresult
+NS_IMETHODIMP
 CNavDTD::DidBuildModel(nsresult anErrorCode,
-                       nsIParser* aParser,
-                       nsIContentSink* aSink)
+                       nsIParser* aParser)
 {
-  if (!aSink) {
+  if (!mSink) {
     return NS_OK;
   }
 
   nsresult result = NS_OK;
   if (aParser) {
     if (NS_OK == anErrorCode) {
       if (!(mFlags & NS_DTD_FLAG_HAS_MAIN_CONTAINER)) {
         // This document is not a frameset document, however, it did not contain
         // a body tag either. So, make one!. Note: Body tag is optional per spec..
         // Also note: We ignore the return value of BuildNeglectedTarget, we
         // can't reasonably respond to errors (or requests to block) at this
         // point in the parsing process.
-        BuildNeglectedTarget(eHTMLTag_body, eToken_start, aParser, aSink);
+        BuildNeglectedTarget(eHTMLTag_body, eToken_start, aParser);
       }
       if (mFlags & NS_DTD_FLAG_MISPLACED_CONTENT) {
         // Looks like the misplaced contents are not processed yet.
         // Here is our last chance to handle the misplaced content.
 
         // Keep track of the top index.
         PRInt32 topIndex = mBodyContext->mContextTopIndex;
         
@@ -2117,17 +2113,17 @@ CNavDTD::CollectAttributes(nsIParserNode
  *  This method is called to determine whether or not a tag
  *  of one type can contain a tag of another type.
  *  
  *  @update  gess 4/8/98
  *  @param   aParent -- tag enum of parent container
  *  @param   aChild -- tag enum of child container
  *  @return  PR_TRUE if parent can contain child
  */
-PRBool
+NS_IMETHODIMP_(PRBool)
 CNavDTD::CanContain(PRInt32 aParent, PRInt32 aChild) const
 {
   PRBool result = gHTMLElements[aParent].CanContain((eHTMLTags)aChild, mDTDMode);
 
   if (eHTMLTag_nobr == aChild &&
       IsInlineElement(aParent, aParent) &&
       HasOpenContainer(eHTMLTag_nobr)) {
     return PR_FALSE;
@@ -2296,17 +2292,17 @@ CNavDTD::CanOmit(eHTMLTags aParent, eHTM
 /**
  *  This method gets called to determine whether a given 
  *  tag is itself a container
  *  
  *  @update  gess 4/8/98
  *  @param   aTag -- tag to test as a container
  *  @return  PR_TRUE if given tag can contain other tags
  */
-PRBool
+NS_IMETHODIMP_(PRBool)
 CNavDTD::IsContainer(PRInt32 aTag) const
 {
   return nsHTMLElement::IsContainer((eHTMLTags)aTag);
 }
 
 
 PRBool
 CNavDTD::ForwardPropagate(nsString& aSequence, eHTMLTags aParent,
diff --git a/parser/htmlparser/src/CNavDTD.h b/parser/htmlparser/src/CNavDTD.h
--- a/parser/htmlparser/src/CNavDTD.h
+++ b/parser/htmlparser/src/CNavDTD.h
@@ -253,16 +253,18 @@ private:
     /**
      * Finds the topmost occurrence of given tag within context vector stack.
      *
      * @param   tag to be found
      * @return  index of topmost tag occurrence -- may be -1 (kNotFound).
      */
     PRInt32 LastOf(eHTMLTags aTagSet[], PRInt32 aCount) const;
 
+    nsresult HandleToken(CToken* aToken, nsIParser* aParser);
+
     /**
      *  This method gets called when a start token has been
      *  encountered in the parse process. If the current container
      *  can contain this tag, then add it. Otherwise, you have
      *  two choices: 1) create an implicit container for this tag
      *                  to be stored in
      *               2) close the top container, and add this to
      *                  whatever container ends up on top.
@@ -290,17 +292,17 @@ private:
                                         nsCParserNode *aNode);
     nsresult    HandleEndToken(CToken* aToken);
     nsresult    HandleEntityToken(CToken* aToken);
     nsresult    HandleCommentToken(CToken* aToken);
     nsresult    HandleAttributeToken(CToken* aToken);
     nsresult    HandleProcessingInstructionToken(CToken* aToken);
     nsresult    HandleDocTypeDeclToken(CToken* aToken);
     nsresult    BuildNeglectedTarget(eHTMLTags aTarget, eHTMLTokenTypes aType,
-                                     nsIParser* aParser, nsIContentSink* aSink);
+                                     nsIParser* aParser);
 
     nsresult OpenHTML(const nsCParserNode *aNode);
     nsresult OpenBody(const nsCParserNode *aNode);
 
     /**
      * The special purpose methods automatically close
      * one or more open containers.
      * @return  error code - 0 if all went well.
diff --git a/parser/htmlparser/src/nsExpatDriver.cpp b/parser/htmlparser/src/nsExpatDriver.cpp
--- a/parser/htmlparser/src/nsExpatDriver.cpp
+++ b/parser/htmlparser/src/nsExpatDriver.cpp
@@ -798,20 +798,22 @@ nsExpatDriver::OpenInputStreamFromExtern
     nsCOMPtr<nsIURI> localURI;
     if (!IsLoadableDTD(mCatalogData, uri, getter_AddRefs(localURI))) {
       return NS_ERROR_NOT_IMPLEMENTED;
     }
 
     localURI.swap(uri);
   }
 
-  nsCOMPtr<nsIContentSink> sink = do_QueryInterface(mSink);
   nsCOMPtr<nsIDocument> doc;
-  if (sink)
-    doc = do_QueryInterface(sink->GetTarget());
+  NS_ASSERTION(mSink == nsCOMPtr<nsIExpatSink>(do_QueryInterface(mOriginalSink)),
+               "In nsExpatDriver::OpenInputStreamFromExternalDTD: "
+               "mOriginalSink not the same object as mSink?");
+  if (mOriginalSink)
+    doc = do_QueryInterface(mOriginalSink->GetTarget());
   PRInt16 shouldLoad = nsIContentPolicy::ACCEPT;
   rv = NS_CheckContentLoadPolicy(nsIContentPolicy::TYPE_DTD,
                                 uri,
                                 (doc ? doc->NodePrincipal() : nsnull),
                                 doc,
                                 EmptyCString(), //mime guess
                                 nsnull,         //extra
                                 &shouldLoad);
@@ -1227,16 +1229,18 @@ nsExpatDriver::WillBuildModel(const CPar
   mSink = do_QueryInterface(aSink);
   if (!mSink) {
     NS_ERROR("nsExpatDriver didn't get an nsIExpatSink");
     // Make sure future calls to us bail out as needed
     mInternalState = NS_ERROR_UNEXPECTED;
     return mInternalState;
   }
 
+  mOriginalSink = aSink;
+
   static const XML_Memory_Handling_Suite memsuite =
     {
       (void *(*)(size_t))PR_Malloc,
       (void *(*)(void *, size_t))PR_Realloc,
       PR_Free
     };
 
   static const PRUnichar kExpatSeparator[] = { kExpatSeparatorChar, '\0' };
@@ -1294,30 +1298,26 @@ nsExpatDriver::WillBuildModel(const CPar
   // XML must detect invalid character convertion
   aParserContext.mScanner->OverrideReplacementCharacter(0xffff);
 
   return mInternalState;
 }
 
 NS_IMETHODIMP
 nsExpatDriver::BuildModel(nsIParser* aParser,
-                          nsITokenizer* aTokenizer,
-                          nsITokenObserver* anObserver,
-                          nsIContentSink* aSink)
+                          nsITokenizer* aTokenizer)
 {
   return mInternalState;
 }
 
 NS_IMETHODIMP
 nsExpatDriver::DidBuildModel(nsresult anErrorCode,
-                             nsIParser* aParser,
-                             nsIContentSink* aSink)
+                             nsIParser* aParser)
 {
-  // Check for mSink is intentional. This would make sure
-  // that DidBuildModel() is called only once on the sink.
+  mOriginalSink = nsnull;
   mSink = nsnull;
   mExtendedSink = nsnull;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsExpatDriver::WillTokenize(PRBool aIsFinalChunk,
                             nsTokenAllocator* aTokenAllocator)
@@ -1404,17 +1404,17 @@ nsExpatDriver::PrependTokens(nsDeque& aD
 }
 
 NS_IMETHODIMP
 nsExpatDriver::CopyState(nsITokenizer* aTokenizer)
 {
   return NS_OK;
 }
 
-NS_IMETHODIMP
+nsresult
 nsExpatDriver::HandleToken(CToken* aToken,nsIParser* aParser)
 {
   return NS_OK;
 }
 
 NS_IMETHODIMP_(PRBool)
 nsExpatDriver::IsContainer(PRInt32 aTag) const
 {
diff --git a/parser/htmlparser/src/nsExpatDriver.h b/parser/htmlparser/src/nsExpatDriver.h
--- a/parser/htmlparser/src/nsExpatDriver.h
+++ b/parser/htmlparser/src/nsExpatDriver.h
@@ -59,16 +59,18 @@ public:
   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
   NS_DECL_NSIDTD
   NS_DECL_NSITOKENIZER
   NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS(nsExpatDriver, nsIDTD)
 
   nsExpatDriver();
   virtual ~nsExpatDriver();
 
+  nsresult HandleToken(CToken* aToken, nsIParser* aParser);
+
   int HandleExternalEntityRef(const PRUnichar *aOpenEntityNames,
                               const PRUnichar *aBase,
                               const PRUnichar *aSystemId,
                               const PRUnichar *aPublicId);
   nsresult HandleStartElement(const PRUnichar *aName, const PRUnichar **aAtts);
   nsresult HandleEndElement(const PRUnichar *aName);
   nsresult HandleCharacterData(const PRUnichar *aCData, const PRUint32 aLength);
   nsresult HandleComment(const PRUnichar *aName);
@@ -151,15 +153,20 @@ private:
   // Necko
   PRPackedBool     mIsFinalChunk;
 
   nsresult         mInternalState;
 
   // The length of the data in Expat's buffer (in number of PRUnichars).
   PRUint32         mExpatBuffered;
 
+  // These sinks all refer the same conceptual object. mOriginalSink is
+  // identical with the nsIContentSink* passed to WillBuildModel, and exists
+  // only to avoid QI-ing back to nsIContentSink*.
+  nsCOMPtr<nsIContentSink> mOriginalSink;
   nsCOMPtr<nsIExpatSink> mSink;
   nsCOMPtr<nsIExtendedExpatSink> mExtendedSink;
+
   const nsCatalogData* mCatalogData; // weak
   nsString         mURISpec;
 };
 
 #endif
diff --git a/parser/htmlparser/src/nsHTMLTokenizer.cpp b/parser/htmlparser/src/nsHTMLTokenizer.cpp
--- a/parser/htmlparser/src/nsHTMLTokenizer.cpp
+++ b/parser/htmlparser/src/nsHTMLTokenizer.cpp
@@ -68,18 +68,18 @@ NS_IMPL_ISUPPORTS1(nsHTMLTokenizer, nsIT
  * 
  * @param  aParseMode The current mode the document is in (quirks, etc.)
  * @param  aDocType The document type of the current document
  * @param  aCommand What we are trying to do (view-source, parse a fragment, etc.)
  */
 nsHTMLTokenizer::nsHTMLTokenizer(nsDTDMode aParseMode,
                                  eParserDocType aDocType,
                                  eParserCommands aCommand,
-                                 PRUint16 aFlags) :
-  nsITokenizer(), mTokenDeque(0), mFlags(aFlags)
+                                 PRUint32 aFlags)
+  : mTokenDeque(0), mFlags(aFlags)
 {
   if (aParseMode == eDTDMode_full_standards ||
       aParseMode == eDTDMode_almost_standards) {
     mFlags |= NS_IPARSER_FLAG_STRICT_MODE;
   } else if (aParseMode == eDTDMode_quirks)  {
     mFlags |= NS_IPARSER_FLAG_QUIRKS_MODE;
   } else if (aParseMode == eDTDMode_autodetect) {
     mFlags |= NS_IPARSER_FLAG_AUTO_DETECT_MODE;
diff --git a/parser/htmlparser/src/nsHTMLTokenizer.h b/parser/htmlparser/src/nsHTMLTokenizer.h
--- a/parser/htmlparser/src/nsHTMLTokenizer.h
+++ b/parser/htmlparser/src/nsHTMLTokenizer.h
@@ -65,17 +65,17 @@
 class nsHTMLTokenizer : public nsITokenizer {
 public:
   
   NS_DECL_ISUPPORTS
   NS_DECL_NSITOKENIZER
   nsHTMLTokenizer(nsDTDMode aParseMode = eDTDMode_quirks,
                   eParserDocType aDocType = eHTML_Quirks,
                   eParserCommands aCommand = eViewNormal,
-                  PRUint16 aFlags = 0);
+                  PRUint32 aFlags = 0);
   virtual ~nsHTMLTokenizer();
 
   static PRUint32 GetFlags(const nsIContentSink* aSink);
 
 protected:
 
   nsresult ConsumeTag(PRUnichar aChar,CToken*& aToken,nsScanner& aScanner,PRBool& aFlushTokens);
   nsresult ConsumeStartTag(PRUnichar aChar,CToken*& aToken,nsScanner& aScanner,PRBool& aFlushTokens);
diff --git a/parser/htmlparser/src/nsParser.cpp b/parser/htmlparser/src/nsParser.cpp
--- a/parser/htmlparser/src/nsParser.cpp
+++ b/parser/htmlparser/src/nsParser.cpp
@@ -1520,17 +1520,17 @@ nsParser::DidBuildModel(nsresult anError
 
   if (IsComplete()) {
     if (mParserContext && !mParserContext->mPrevContext) {
       // Let sink know if we're about to end load because we've been terminated.
       // In that case we don't want it to run deferred scripts.
       PRBool terminated = mInternalState == NS_ERROR_HTMLPARSER_STOPPARSING;
       if (mDTD && mSink &&
           mSink->ReadyToCallDidBuildModel(terminated)) {
-        nsresult dtdResult =  mDTD->DidBuildModel(anErrorCode,this,mSink),
+        nsresult dtdResult =  mDTD->DidBuildModel(anErrorCode,this),
                 sinkResult = mSink->DidBuildModel();
         result = NS_FAILED(sinkResult) ? sinkResult : dtdResult;
       }
 
       //Ref. to bug 61462.
       mParserContext->mRequest = 0;
     }
   }
@@ -2337,17 +2337,17 @@ nsParser::BuildModel()
   nsresult result = NS_OK;
   if (mParserContext) {
     result = mParserContext->GetTokenizer(mDTD, mSink, theTokenizer);
   }
 
   if (NS_SUCCEEDED(result)) {
     if (mDTD) {
       MOZ_TIMER_START(mDTDTime);
-      result = mDTD->BuildModel(this, theTokenizer, nsnull, mSink);
+      result = mDTD->BuildModel(this, theTokenizer);
       MOZ_TIMER_STOP(mDTDTime);
     }
   } else {
     mInternalState = result = NS_ERROR_HTMLPARSER_BADTOKENIZER;
   }
   return result;
 }
 
diff --git a/parser/htmlparser/src/nsViewSourceHTML.cpp b/parser/htmlparser/src/nsViewSourceHTML.cpp
--- a/parser/htmlparser/src/nsViewSourceHTML.cpp
+++ b/parser/htmlparser/src/nsViewSourceHTML.cpp
@@ -256,20 +256,21 @@ CViewSourceHTML::~CViewSourceHTML(){
   * The parser uses a code sandwich to wrap the parsing process. Before
   * the process begins, WillBuildModel() is called. Afterwards the parser
   * calls DidBuildModel().
   * @update rickg 03.20.2000
   * @param  aParserContext
   * @param  aSink
   * @return error code (almost always 0)
   */
-nsresult CViewSourceHTML::WillBuildModel(const CParserContext& aParserContext,
-                                         nsITokenizer* aTokenizer,
-                                         nsIContentSink* aSink){
-
+NS_IMETHODIMP
+CViewSourceHTML::WillBuildModel(const CParserContext& aParserContext,
+                                nsITokenizer* aTokenizer,
+                                nsIContentSink* aSink)
+{
   nsresult result=NS_OK;
 
 #ifdef RAPTOR_PERF_METRICS
   vsTimer.Reset();
   NS_START_STOPWATCH(vsTimer);
 #endif
 
   STOP_TIMER();
@@ -321,17 +322,19 @@ nsresult CViewSourceHTML::WillBuildModel
 /**
   * The parser uses a code sandwich to wrap the parsing process. Before
   * the process begins, WillBuildModel() is called. Afterwards the parser
   * calls DidBuildModel().
   * @update gess5/18/98
   * @param  aFilename is the name of the file being parsed.
   * @return error code (almost always 0)
   */
-NS_IMETHODIMP CViewSourceHTML::BuildModel(nsIParser* aParser,nsITokenizer* aTokenizer,nsITokenObserver* anObserver,nsIContentSink* aSink) {
+NS_IMETHODIMP CViewSourceHTML::BuildModel(nsIParser* aParser,
+                                          nsITokenizer* aTokenizer)
+{
   nsresult result=NS_OK;
 
   if(aTokenizer && aParser) {
 
     nsITokenizer*  oldTokenizer=mTokenizer;
     mTokenizer=aTokenizer;
     nsTokenAllocator* theAllocator=mTokenizer->GetTokenAllocator();
 
@@ -530,17 +533,19 @@ void CViewSourceHTML::AddAttrToNode(nsCP
 }
 
 /**
  *
  * @update  gess5/18/98
  * @param
  * @return
  */
-NS_IMETHODIMP CViewSourceHTML::DidBuildModel(nsresult anErrorCode,nsIParser* aParser,nsIContentSink* aSink){
+NS_IMETHODIMP CViewSourceHTML::DidBuildModel(nsresult anErrorCode,
+                                             nsIParser* aParser)
+{
   nsresult result= NS_OK;
 
   //ADD CODE HERE TO CLOSE OPEN CONTAINERS...
 
   if(aParser){
 
     mParser=(nsParser*)aParser;  //debug XXX
     STOP_TIMER();
@@ -619,30 +624,34 @@ void CViewSourceHTML::SetVerification(PR
  *  This method is called to determine whether or not a tag
  *  of one type can contain a tag of another type.
  *
  *  @update  gess 3/25/98
  *  @param   aParent -- int tag of parent container
  *  @param   aChild -- int tag of child container
  *  @return  PR_TRUE if parent can contain child
  */
-PRBool CViewSourceHTML::CanContain(PRInt32 aParent,PRInt32 aChild) const{
+NS_IMETHODIMP_(PRBool)
+CViewSourceHTML::CanContain(PRInt32 aParent, PRInt32 aChild) const
+{
   PRBool result=PR_TRUE;
   return result;
 }
 
 /**
  *  This method gets called to determine whether a given
  *  tag is itself a container
  *  
  *  @update  gess 3/25/98
  *  @param   aTag -- tag to test for containership
  *  @return  PR_TRUE if given tag can contain other tags
  */
-PRBool CViewSourceHTML::IsContainer(PRInt32 aTag) const{
+NS_IMETHODIMP_(PRBool)
+CViewSourceHTML::IsContainer(PRInt32 aTag) const
+{
   PRBool result=PR_TRUE;
   return result;
 }
 
 /**
  *  This method gets called when a tag needs to write it's attributes
  *
  *  @update  gess 3/25/98
@@ -820,17 +829,18 @@ nsresult CViewSourceHTML::WriteTag(PRInt
 }
 
 /**
  *
  *  @update  gess 3/25/98
  *  @param   aToken -- token object to be put into content model
  *  @return  0 if all is well; non-zero is an error
  */
-NS_IMETHODIMP CViewSourceHTML::HandleToken(CToken* aToken,nsIParser* aParser)
+nsresult
+CViewSourceHTML::HandleToken(CToken* aToken,nsIParser* aParser)
 {
   nsresult        result=NS_OK;
   CHTMLToken*     theToken= (CHTMLToken*)(aToken);
   eHTMLTokenTypes theType= (eHTMLTokenTypes)theToken->GetTokenType();
 
   mParser=(nsParser*)aParser;
   mSink=(nsIHTMLContentSink*)aParser->GetContentSink();
 
diff --git a/parser/htmlparser/src/nsViewSourceHTML.h b/parser/htmlparser/src/nsViewSourceHTML.h
--- a/parser/htmlparser/src/nsViewSourceHTML.h
+++ b/parser/htmlparser/src/nsViewSourceHTML.h
@@ -90,16 +90,18 @@ public:
      * context stack.
      * @update  gess 7/23/98
      * @param
      * @return
      */
     virtual void SetVerification(PRBool aEnable);
 
 private:
+    nsresult HandleToken(CToken* aToken, nsIParser* aParser);
+
     nsresult WriteTag(PRInt32 tagType,
                       const nsSubstring &aText,
                       PRInt32 attrCount,
                       PRBool aTagInError);
 
     nsresult WriteAttributes(const nsAString& tagName, 
         nsTokenAllocator* allocator, PRInt32 attrCount, PRBool aOwnerInError);
     void StartNewPreBlock(void);
